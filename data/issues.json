[
    {
        "title": "build: use pep517",
        "body": "put package matadata in `pyproject.toml` instead of `setup.py`"
    },
    {
        "title": "Update workflow.get_runs & pullrequest.add_to_assignees function signature",
        "body": "The `workflow.get_runs` function handles both the objects `NamedUser.NamedUser` and `Branch.Branch` and `str` type for its parameters internally but the type signature only accepts the objects.  `pullrequest.add_to_assignees` handles `NamedUser.NamedUser` and `str` internally but only accepts `NamedUser.NamedUser`.  This change updates the function signatures to match the types handled internally by the function."
    },
    {
        "title": "use new type assert functions in Repository.py",
        "body": null
    },
    {
        "title": "Add Repository.generate_release_notes to resolve Issue 2794",
        "body": "1. Problem I was attempting to resolve Currently the only way to access the [Generate Release Notes Endpoint](https://docs.github.com/en/rest/releases/releases?apiVersion=2022-11-28#generate-release-notes-content-for-a-release) is to make the call yourself by accessing the `Repository._requester` property, which is obviously not preferred.  2. How I went about resolving the problem. Added a `generate_release_notes` function to the `Repository`. I wasn't sure if I should create a new object, use a Named Tuple, or return the raw dictionary, so I opted to return the contents of the release notes, or None.  My python experience is lacking, so I wasn't able to figure out how to create an automated test for this PR, except for maybe attempting to hand create a replay file, which felt inappropriate."
    },
    {
        "title": "Add missing attributes to `PullRequest` and `Repository`",
        "body": "This PR adds the following attributes which are returned in github API responses but were missing from PyGithub:  - `PullRequest` ([sample JSON response](https://api.github.com/repos/PyGithub/PyGithub/pulls/2793))   - `active_lock_reason`: str | None   - `locked`: bool - `Repository` ([sample JSON response](https://api.github.com/repos/PyGithub/PyGIthub))   - `disabled`: bool  Happy to address any feedback, and thanks very much for putting together this useful library! "
    },
    {
        "title": "Provide Generate Release Notes Function",
        "body": "The following would be useful to have.dd```pythondRepository.generate_release_notes(d  tag: str, d  previous_tag_name: Opt[str],d  target_commitish: Opt[str] = NotSet, d  configuration_file_path: Opt[str] = NotSetd) -> SomeGitObjectd```dcallingd`POST /repos/{owner}/{repo}/releases/generate-notes`ddGenerating Release notes without generating a release is useful for pushing them to other locations. You might want to trigger a Github Action off the creation of a Pre-Release, and then generate the notes to hydrate the release. Or you might have 3 releases, delete the second one, and then have to rehydrate the third one to include all the information, etc.d"
    },
    {
        "title": "Add `required_conversation_resolution` to `BranchProtection`",
        "body": "`BranchProtection.required_conversation_resolution` was missing, so I added it. Just used `scripts/add_attribute` and added attribute tests accordingly using existing replay data. "
    },
    {
        "title": "Filter collaborators of a repository by permissions, fixes #2328",
        "body": "fixes #2328"
    },
    {
        "title": "how can I get the latest tag of a repo",
        "body": "```pydfrom github import Githubdg = Github()drepo = g.get_repo(\"InfinityMods/Ascension\")dtags = list(repo.get_tags())d... How do i get the latest tag hered```ddI have tried using `latest_tag = tags[0]` but it does not give the temporally latest tag (instead it appears to give the alphabetically latest release) "
    },
    {
        "title": "Pull requests  to projects",
        "body": "Hello,ddCould you please add a section in the examples on how to connect a PullRequest to a Project? The documentation doesn't pop anything up on this, but this is possible on github. And this is useful for organizational projects especially in some workflows.d"
    },
    {
        "title": "github/GitRelease.py added \"make_latest\" option for def \"update_release\"",
        "body": "1. The problem:ddef \"update_release\" can not make release as \"latest\"dd2. How solving the problem:dadding optional parameter \"make_latest\", from original api doc: https://docs.github.com/en/free-pro-team@latest/rest/releases/releases?apiVersion=2022-11-28#update-a-release--code-samples"
    },
    {
        "title": "Add OpenSSF Scorecard GH Action",
        "body": "https://securityscorecards.dev/"
    },
    {
        "title": "Variable modification results in 404 due to malformed URL",
        "body": "The `url` attribute in the Variable class already has the form of `https://api.github.com/repos/OWNER/REPO/actions/variables/VAR_NAME`ddHowever the edit and delete commands also append `/actions/variables/VAR_NAME` onto this leading to `https://api.github.com/repos/OWNER/REPO/actions/variables/VAR_NAME/actions/variables/VAR_NAME`ddThis causes a 404 and so the commands don't work.  Either the edit/delete commands need to no longer append this string or the self.url attribute should not include it"
    },
    {
        "title": "Feature Request- Request to support pull request reviews",
        "body": "## Request to add functionality to perform actions on pull request reviews - Feature RequestdI can see there is API published by Github to be able to work with reviews for a pull request (LIST, GET, POST etc).dIt would be great if that functionality can be supported within PyGithub as well.ddHere is [link](https://docs.github.com/en/rest/pulls/reviews?apiVersion=2022-11-28#create-a-review-for-a-pull-request) to Github APIs."
    },
    {
        "title": "Issue 2733/has discussions",
        "body": "This PR adds the `has_discussions` property as mentioned in issue #2733 as well as the ability to set it when the auth'd user is creating a new repo."
    },
    {
        "title": "Support oauth for enterprise",
        "body": "Fixes #2766, fixes #2485."
    },
    {
        "title": "Minor typo",
        "body": null
    },
    {
        "title": "Add `GithubObject.last_modified_datetime` to have `last_modified` as a `datetime`",
        "body": "As nearly all dates are returned as `datetime.datetime`, it would be convenient to have `last_modified` as a `datetime.datetime` as well.dAs discussed below, let's introduce `last_modified_datetime` new argument to cover this need."
    },
    {
        "title": "404 Git diff of pull request",
        "body": "I have Github App installed on my **private** testing repository.dI am trying to get the actual **git diff content** of a pull request (not just the url).dIf I access the diff endpoint in my browser, I get the expected output, so the endpoint, which pr.diff_url provides is correct. Important note is that when I access it from the browser, there is a token parameter added.ddhere is my authentication process: d``` pythondauth = github.Auth.AppAuth(app_id, app_key)dgi = github.GithubIntegration(auth=auth)dinstallation_id = vars.private_repo_installation_iddtry:d    installation = gi.get_app_installation(installation_id)dexcept Exception as e:d    print(\"Installation not found.\")d    exit()dg = installation.get_github_for_installation()drepo = g.get_repo(<repo-name>)dpr = repo.get_pull(<pr-number>)d``` ddthen, using the requests library:d``` pythondresponse = requests.get(pr.diff_url)dif response.status_code == 200:     diff_content = response.text else:     print(f\"Failed to fetch diff content. Status code: {response.status_code}\") ```  For public repos, it works fine, but for private repositories, I get **status code 404**.  I assumed it was the lack of authentication (although the status code is 404, not 403 or 401) so I added: ```python headers = {\"Authorization\": f\"token {gi.get_access_token(installation_id)}\"} ``` and later in the request: ```python response = requests.get(pr.diff_url, headers=headers) ```  yet the 404 persists.   but I am unsure how to use it, couldn't find any examples in the documentation. The following code still encounters 404 error: ```python token = gi.get_access_token(installation_id) token = token.token url = pr.diff_url + '?token=' + token response = requests.get(url) ``` "
    },
    {
        "title": "Fix URL used in Team.update_team_repository method",
        "body": "Use of string doesn't make sense unless you know that the `repo` argument here means `{owner}/{repo}`, and not just `{repo}`.  If you simply pass repo name you instead get a silent failure that returns 404: ```json {\"message\":\"Not Found\",\"documentation_url\":\"https://docs.github.com/rest\"} ```"
    },
    {
        "title": "Github enterprise -- app.get_access_token fails on Requester.py  __makeAbsoluteUrl assertions.",
        "body": "Hi,  Running with PyGithub v1.59.1 = \"latest\". Trying to follow the example in https://pygithub.readthedocs.io/en/latest/examples/Authentication.html#app-user-authentication but for my company's internal GitHub Enterprise installation.    ``` my_base_url=\"https://\" + my_hostname + \"/api/v3\" gh = Github( base_url=my_base_url ) app = gh.get_oauth_application( client_info[ 'client_id' ], client_info[ 'client_secret'] ) token = app.get_access_token( code_string ) ```  The last line fails with: ``` Traceback (most recent call last):     ... my code path ...       token = app.get_access_token( code_string )   File \"****/.local/lib/python3.8/site-packages/github/ApplicationOAuth.py\", line 101, in get_access_token     *self._requester.requestJsonAndCheck(   File \"****/.local/lib/python3.8/site-packages/github/Requester.py\", line 443, in requestJsonAndCheck     *self.requestJson(   File \"****/.local/lib/python3.8/site-packages/github/Requester.py\", line 580, in requestJson     return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)   File \"****/.local/lib/python3.8/site-packages/github/Requester.py\", line 676, in __requestEncode     url = self.__makeAbsoluteUrl(url)   File \"****/.local/lib/python3.8/site-packages/github/Requester.py\", line 784, in __makeAbsoluteUrl     assert o.path.startswith((self.__prefix, \"/api/\")) AssertionError ```  Instrumenting my local copy of `Requester.py`, function `__makeAbsoluteUrl()`, with some print statements, just before the [fail point](https://github.com/PyGithub/PyGithub/blob/ed2af241a9a45ee99caca185ae61679bffda5219/github/Requester.py#L784C14-L784C14), reveals the following: ``` __makeAbsoluteUrl -- url=https://github.com/login/oauth/access_token __makeAbsoluteUrl -- o.hostname=github.com __makeAbsoluteUrl -- o.path=/login/oauth/access_token ``` This shows two separate problems: 1.  `url` and therefore `o.hostname`  do not reflect the desired `my_hostname` 2.  `o.path` is correct for the `get_access_token()` operation,  but does not start with `\"/api/\"` and thus fails the assertion in line 784.  Tracing further back, I see that problem 1  is caused by  the hard-coded url in ApplicationOAuth.py  line 100 ff, which does not allow flexibility in hostname: ```         headers, data = self._checkError(             *self._requester.requestJsonAndCheck(                 \"POST\",                 \"https://github.com/login/oauth/access_token\",                 headers={\"Accept\": \"application/json\"},                 input=post_parameters,             )         ) ```  I notice that the same problems occur with   ApplicationOAuth.py  function  `refresh_access_token()`.  For now, I bypassed these functions. I can get an access+refresh token by using the `requests` library to post to the correct url, and then directly building  `auth = Auth.AppUserAuth(  ....  )`   according to the template in [ApplicationOAuth.py  line 123 ff](https://github.com/PyGithub/PyGithub/blob/ed2af241a9a45ee99caca185ae61679bffda5219/github/ApplicationOAuth.py#L123). "
    },
    {
        "title": "`Repository.create_label()` should allow `color` to be unspecified",
        "body": "The `Repository.create_label()` method should support being called without a `color` argument.  The GitHub API accepts label creation requests that do not specify a color; the resulting labels are assigned random colors."
    },
    {
        "title": "Add `actor` property to WorkflowRun",
        "body": "The GitHub API [returns an `actor` field when listing workflow runs](https://docs.github.com/en/free-pro-team@latest/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow) but `WorkflowRun` does not include `actor`.   This PR adds the `actor` property of `NamedUser` type.  Not sure about field ordering conventions so just followed the API response schema."
    },
    {
        "title": "Add a requester method to explicitly validate status codes",
        "body": "# Problem  Described a specific scenario in detail here: https://github.com/PyGithub/PyGithub/issues/2760  The general problem is when `requestJson` is used to get a status code and then comparing that to an expected status code via `status == <expected status>`. This pattern does not handle codes that would be returned due to errors like Authentication errors ( 401, 403) , Validation errors (422), Not found (404), etc. Instead of an appropriate error being raised to the user so they can act on it, the error is swallowed and the call returns False.  # Evaluation  From my understanding of the code, the `is_merged` method uses `requestJson` instead of `requestJsonAndCheck` since the latter would raise an `UnknownObjectException` when a pull request is not merged. This is due to the APIs use of 404 to signify a pull request has not been merged. See [here](https://docs.github.com/en/rest/pulls/pulls?apiVersion=2022-11-28#check-if-a-pull-request-has-been-merged) for details.  The other issue is that `requestJsonAndCheck` does not return the `status` so a comparison on that with an expected code is currently not possible.   This seems to me like a generic approach is needed that returns `status` and raises exceptions but can ignore certain expected 400+ codes.  # Proposed Solution  I see two possible solutions: 1. Modify `requestJsonAndCheck` to return `status` and ignore certain codes like 404 in the is_merged case. 2. Create a new method that returns `status` and validates it's within the expected codes if not it raises an exception.  I opted not to pursue Solution 1 since it is a breaking change and every call to `requestJsonAndCheck` would need to handle the new `status` returned.  Opted for Solution 2 since it can be implemented in a rolling basis in the scenarios that require it and `requestJsonAndCheck` could remain as is.  **NOTE**: I am new to the code base so if there's a better way of solving this issue that I have missed let me know.  # Testing  ``` >>> import github >>> github_client = github.Github(\"<TOKEN>\") >>> upstream_repo = github_client.get_repo(\"PyGithub/PyGithub\") >>> pr = upstream_repo.get_pull(2763) >>> pr.is_merged() False # Deleted TOKEN above from my account >>> pr.is_merged() Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>   File \"../PyGithub/github/PullRequest.py\", line 727, in is_merged     status, _, _ = self._requester.requestJsonAndValidateStatus(\"GET\", f\"{self.url}/merge\", {204, 404})   File \"../PyGithub/github/Requester.py\", line 631, in requestJsonAndValidateStatus     raise self.createException(status, responseHeaders, data) github.GithubException.BadCredentialsException: 401 {\"message\": \"Bad credentials\", \"documentation_url\": \"https://docs.github.com/rest\"} ```"
    },
    {
        "title": "PullRequest.is_merged does not handle token expiration",
        "body": "# Context  I am trying to build some automation using PyGithub and a Github App to authenticate to our organization. The token I can get has an expiration of 1 hour.  The idea of my workflow is to do the following steps: 1. Get a token from Github App 2. Create pull request 3. Notify reviewers 4. Wait for PR to be merged with a flexible timeout to allow reviewers time to review. 5. Once PR is merged, do more steps  The problem arises in 4 if the timeout exceeds 1 hour.  # Problem  In the scenario above I noticed that even after the authentication token has expired, calling `pr.is_merged()` returns `False`.  Looking at the code the behavior I was seeing makes sense: ```     def is_merged(self) -> bool:         \"\"\"         :calls: `GET /repos/{owner}/{repo}/pulls/{number}/merge <https://docs.github.com/en/rest/reference/pulls>`_         \"\"\"         status, headers, data = self._requester.requestJson(\"GET\", f\"{self.url}/merge\")         return status == 204 ``` since the status of the request with expired token would be 401.  I see two issues with this: 1. False negatives - a PR could have been merged but `is_merged` returns False.  2. Consumer is not notified in any way that their authentication has expired.  This also differs from other methods that I have been using like `pr.get_commits().get_page(0)` or `pr.get_labels().get_page(0)` which fail with the expected `github.BadCredentialsException` as soon as the token expires.  I also tested with a token that has no access to my organization, but in that case an expected 403 was raised which seems to be handled by `github.GithubRetry`.  # Steps to Reproduce  1. Create a Github Token on your account with `repo` access 2. Use token to create a client and get a pull request `pr` 3. Remove Github token from your account 4 . Run `pr.is_merged` .  For example: ``` import github github_client = github.Github(\"<YOUR TOKEN>\")  upstream_repo = github_client.get_repo(\"PyGithub/PyGithub\") pr = upstream_repo.get_pull(2757) pr.is_merged() False pr.get_commits().get_page(0) [Commit(sha=\"7569ac6c33e3682fa42ddf7aee1640198461a557\"), Commit(sha=\"626a0435d063b12f9a9501a282e7371fe8783494\")] # # Remove token from account # pr.is_merged() False pr.get_commits().get_page(0) Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>   File \".../site-packages/github/PaginatedList.py\", line 258, in get_page     headers, data = self.__requester.requestJsonAndCheck(   File \".../site-packages/github/Requester.py\", line 442, in requestJsonAndCheck     return self.__check(   File \".../site-packages/github/Requester.py\", line 487, in __check     raise self.__createException(status, responseHeaders, data) github.GithubException.BadCredentialsException: 401 {\"message\": \"Bad credentials\", \"documentation_url\": \"https://docs.github.com/rest\"} ```  # Workaround  I call `pr.get_commits().get_page(0)` as well to ensure I can catch the token expiration scenario and handle it."
    },
    {
        "title": "404 on get_git_ref() in case of fast calls",
        "body": "In my case a CI uinit-test has problems with 'fast' calls.  I create a branch with REST API (PyGithub) and check if the branch exists. I delete the created branch and check if the branch is deleted. Here is an extract:  ```python ## create branch ## # get sha of base branch ref_main = repo.get_git_ref('heads/'+'main') sha_main = ref_main.raw_data['object']['sha']  # create branch ref_create = repo.create_git_ref(ref='refs/heads/'+branch_name, sha=sha_main) sha_ref_create = ref_create.raw_data['object']['sha']  # check assert sha_main == sha_ref_create, sha_ref_create ref_check = repo.get_git_ref('heads/'+branch_name) assert sha_main == ref_check.raw_data['object']['sha'], ref_check.raw_data['object']['sha']  ## delete branch ## ref_delete = repo.get_git_ref('heads/'+branch_name) # delete ref_delete.delete()  # check refs_check = repo.get_git_refs() assert branch_name not in refs_check, refs_check ``` I run code above multiply times. In must runs it will work wonderfull. In some cases I get a message like this: ```Traceback (most recent call last):   File \"c:/repository_git/ee-pipeline-mngt/test.py\", line 216, in <module>     test(token='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', author=args.author)   File \"c:/repository_git/ee-pipeline-mngt/test.py\", line 42, in test     ref_check = repo.get_git_ref('heads/'+branch_name)   File \"C:\\Program Files\\Python37\\lib\\site-packages\\github\\Repository.py\", line 2352, in get_git_ref     \"GET\", f\"{self.url}{prefix}{ref}\"   File \"C:\\Program Files\\Python37\\lib\\site-packages\\github\\Requester.py\", line 355, in requestJsonAndCheck     verb, url, parameters, headers, input, self.__customConnection(url)   File \"C:\\Program Files\\Python37\\lib\\site-packages\\github\\Requester.py\", line 378, in __check     raise self.__createException(status, responseHeaders, output) github.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest/git/refs#get-all-references-in-a-namespace\"} ```  If I check my test-repository in case of an creash with an external git client the branch exists. To add `repo.update()` won't be helpful.  Greetings an thanks!  Georg"
    },
    {
        "title": "Add state and submitted_at attributes to TimelineEvent",
        "body": "This PR add two new attributes for event type `reviewed`:  - `state`: The state of the submitted review. Can be one of: `commented`, `changes_requested`, `approved` or `dismissed`. - `submitted_at`: The timestamp indicating when the review was submitted.  Doc: https://docs.github.com/en/rest/overview/issue-event-types?apiVersion=2022-11-28#properties-for-reviewed "
    },
    {
        "title": "Remove unusable commit input from `Workflow.create_dispatch`",
        "body": "`Workflow.create_dispatch` currently allows `ref` to be a `github.Commit.Commit` type.   It appears that this option was added when workflow dispatch support was introduced https://github.com/PyGithub/PyGithub/pull/1625#issuecomment-664364599 but [the GitHub API did not end up supporting it](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#create-a-workflow-dispatch-event):  >The git reference for the workflow. The reference can be a branch or tag name.  I've tested this behavior with PyGithub and manually invoking the API, both showing the dispatch creation fails when a commit is provided. The Github CLI gives a more verbose response confirming that their definition of ref does not support commits:  ```shell $ gh workflow --ref \"<a commit that exists in the repo>\" run build.yml could not create workflow dispatch event: HTTP 422: No ref found for: <a commit that exists in the repo> (https://api.github.com/repos/<redacted>/<redacted>/actions/workflows/<redacted>/dispatches) ```"
    },
    {
        "title": "Bump actions/checkout from 3 to 4",
        "body": "Bumps [actions/checkout](https://github.com/actions/checkout) from 3 to 4.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/releases\">actions/checkout's releases</a>.</em></p>\n<blockquote>\n<h2>v4.0.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Update default runtime to node20 by <a href=\"https://github.com/takost\"><code>@\u200btakost</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1436\">actions/checkout#1436</a></li>\n<li>Support fetching without the --progress option by <a href=\"https://github.com/simonbaird\"><code>@\u200bsimonbaird</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1067\">actions/checkout#1067</a></li>\n<li>Release 4.0.0 by <a href=\"https://github.com/takost\"><code>@\u200btakost</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1447\">actions/checkout#1447</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/takost\"><code>@\u200btakost</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1436\">actions/checkout#1436</a></li>\n<li><a href=\"https://github.com/simonbaird\"><code>@\u200bsimonbaird</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1067\">actions/checkout#1067</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3...v4.0.0\">https://github.com/actions/checkout/compare/v3...v4.0.0</a></p>\n<h2>v3.6.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Mark test scripts with Bash'isms to be run via Bash by <a href=\"https://github.com/dscho\"><code>@\u200bdscho</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1377\">actions/checkout#1377</a></li>\n<li>Add option to fetch tags even if fetch-depth &gt; 0 by <a href=\"https://github.com/RobertWieczoreck\"><code>@\u200bRobertWieczoreck</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/579\">actions/checkout#579</a></li>\n<li>Release 3.6.0 by <a href=\"https://github.com/luketomlinson\"><code>@\u200bluketomlinson</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1437\">actions/checkout#1437</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/RobertWieczoreck\"><code>@\u200bRobertWieczoreck</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/579\">actions/checkout#579</a></li>\n<li><a href=\"https://github.com/luketomlinson\"><code>@\u200bluketomlinson</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1437\">actions/checkout#1437</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3.5.3...v3.6.0\">https://github.com/actions/checkout/compare/v3.5.3...v3.6.0</a></p>\n<h2>v3.5.3</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix: Checkout Issue in self hosted runner due to faulty submodule check-ins by <a href=\"https://github.com/megamanics\"><code>@\u200bmegamanics</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1196\">actions/checkout#1196</a></li>\n<li>Fix typos found by codespell by <a href=\"https://github.com/DimitriPapadopoulos\"><code>@\u200bDimitriPapadopoulos</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1287\">actions/checkout#1287</a></li>\n<li>Add support for sparse checkouts by <a href=\"https://github.com/dscho\"><code>@\u200bdscho</code></a> and <a href=\"https://github.com/dfdez\"><code>@\u200bdfdez</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1369\">actions/checkout#1369</a></li>\n<li>Release v3.5.3 by <a href=\"https://github.com/TingluoHuang\"><code>@\u200bTingluoHuang</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1376\">actions/checkout#1376</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/megamanics\"><code>@\u200bmegamanics</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1196\">actions/checkout#1196</a></li>\n<li><a href=\"https://github.com/DimitriPapadopoulos\"><code>@\u200bDimitriPapadopoulos</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1287\">actions/checkout#1287</a></li>\n<li><a href=\"https://github.com/dfdez\"><code>@\u200bdfdez</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1369\">actions/checkout#1369</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3...v3.5.3\">https://github.com/actions/checkout/compare/v3...v3.5.3</a></p>\n<h2>v3.5.2</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix: Use correct API url / endpoint in GHES by <a href=\"https://github.com/fhammerl\"><code>@\u200bfhammerl</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1289\">actions/checkout#1289</a> based on <a href=\"https://redirect.github.com/actions/checkout/issues/1286\">#1286</a> by <a href=\"https://github.com/1newsr\"><code>@\u200b1newsr</code></a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3.5.1...v3.5.2\">https://github.com/actions/checkout/compare/v3.5.1...v3.5.2</a></p>\n<h2>v3.5.1</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Improve checkout performance on Windows runners by upgrading <code>@\u200bactions/github</code> dependency by <a href=\"https://github.com/BrettDong\"><code>@\u200bBrettDong</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1246\">actions/checkout#1246</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/BrettDong\"><code>@\u200bBrettDong</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1246\">actions/checkout#1246</a></li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/blob/main/CHANGELOG.md\">actions/checkout's changelog</a>.</em></p>\n<blockquote>\n<h1>Changelog</h1>\n<h2>v4.0.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1067\">Support fetching without the --progress option</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1436\">Update to node20</a></li>\n</ul>\n<h2>v3.6.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1377\">Fix: Mark test scripts with Bash'isms to be run via Bash</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/579\">Add option to fetch tags even if fetch-depth &gt; 0</a></li>\n</ul>\n<h2>v3.5.3</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1196\">Fix: Checkout fail in self-hosted runners when faulty submodule are checked-in</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1287\">Fix typos found by codespell</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1369\">Add support for sparse checkouts</a></li>\n</ul>\n<h2>v3.5.2</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1289\">Fix api endpoint for GHES</a></li>\n</ul>\n<h2>v3.5.1</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1246\">Fix slow checkout on Windows</a></li>\n</ul>\n<h2>v3.5.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1237\">Add new public key for known_hosts</a></li>\n</ul>\n<h2>v3.4.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1209\">Upgrade codeql actions to v2</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1210\">Upgrade dependencies</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1225\">Upgrade <code>@\u200bactions/io</code></a></li>\n</ul>\n<h2>v3.3.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1045\">Implement branch list using callbacks from exec function</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1050\">Add in explicit reference to private checkout options</a></li>\n<li>[Fix comment typos (that got added in <a href=\"https://redirect.github.com/actions/checkout/issues/770\">#770</a>)](<a href=\"https://redirect.github.com/actions/checkout/pull/1057\">actions/checkout#1057</a>)</li>\n</ul>\n<h2>v3.2.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/942\">Add GitHub Action to perform release</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/967\">Fix status badge</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1002\">Replace datadog/squid with ubuntu/squid Docker image</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/964\">Wrap pipeline commands for submoduleForeach in quotes</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1029\">Update <code>@\u200bactions/io</code> to 1.1.2</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1039\">Upgrading version to 3.2.0</a></li>\n</ul>\n<h2>v3.1.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/939\">Use <code>@\u200bactions/core</code> <code>saveState</code> and <code>getState</code></a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/922\">Add <code>github-server-url</code> input</a></li>\n</ul>\n<h2>v3.0.2</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/770\">Add input <code>set-safe-directory</code></a></li>\n</ul>\n<h2>v3.0.1</h2>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/checkout/commit/3df4ab11eba7bda6032a0b82a6bb43b11571feac\"><code>3df4ab1</code></a> Release 4.0.0 (<a href=\"https://redirect.github.com/actions/checkout/issues/1447\">#1447</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/8b5e8b768746b50394015010d25e690bfab9dfbc\"><code>8b5e8b7</code></a> Support fetching without the --progress option (<a href=\"https://redirect.github.com/actions/checkout/issues/1067\">#1067</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/97a652b80035363df47baee5031ec8670b8878ac\"><code>97a652b</code></a> Update default runtime to node20 (<a href=\"https://redirect.github.com/actions/checkout/issues/1436\">#1436</a>)</li>\n<li>See full diff in <a href=\"https://github.com/actions/checkout/compare/v3...v4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/checkout&package-manager=github_actions&previous-version=3&new-version=4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>"
    },
    {
        "title": "Adding `code_search` to `RateLimit.py`",
        "body": "We now have `code_search` as a property for RateLimit types.  ```python @property def code_search(self) -> Rate:      \"\"\"      Rate limit for code-searchig API               :type: class:`github.Rate.Rate`      \"\"\"      return self._core_search ```  resolves #2745 "
    },
    {
        "title": "`github.Repository.Repository` is missing `get_tag(tag)`",
        "body": "See https://docs.github.com/en/rest/git/tags?apiVersion=2022-11-28#get-a-tag for the API endpoint"
    },
    {
        "title": "\"Connection aborted.\" after 5 minutes when reading private repository via AppInstallationAuth",
        "body": "I am using Github client with AppInstallationAuth to retrieve private repository, and I can successfully do it. However, after waiting 5 minutes and trying again, I am receiving \"Connection aborted.\" message, another try also works successfully.  Maybe token isn't properly refreshed?  #### To reproduce   This is working as expected: <details>   <summary>See working code</summary>  ```python >>> import logging >>> from datetime import datetime >>> from github import Github >>> from github.Auth import AppAuth >>> >>> logging.getLogger().setLevel(logging.DEBUG) >>> logging.getLogger().addHandler(logging.StreamHandler()) >>> >>> github_app_id: int = <app-id> >>> github_app_installation_id: int = <app-installation-id> >>> key = ''' ... -----BEGIN RSA PRIVATE KEY----- ...      [ ... ] ... -----END RSA PRIVATE KEY----- ... ''' >>> >>> app_installation_auth = AppAuth(github_app_id, key).get_installation_auth(github_app_installation_id) >>> g = Github(auth=app_installation_auth) >>> g.get_repo(\"myprivate/repository\") Starting new HTTPS connection (1): api.github.com:443 https://api.github.com:443 \"POST /app/installations/<app-installation-id>/access_tokens HTTP/1.1\" 201 175 Starting new HTTPS connection (1): api.github.com:443 https://api.github.com:443 \"GET /repos/myprivate/repository HTTP/1.1\" 200 None Repository(full_name=\"myprivate/repository\") >>> datetime.utcnow() datetime.datetime(2023, 9, 7, 11, 10, 8, 747464) ``` </details>  After waiting 5 minutes and calling `get_repo()` once again, I am receiving an error:  <details>   <summary>See stacktrace</summary>  ```python >>> g.get_repo(\"myprivate/repository\")          Traceback (most recent call last):                                                                                                                                                        File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 714, in urlopen                                                            httplib_response = self._make_request(                                                                                                                                                File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 466, in _make_request                        six.raise_from(e, None)                                                                                                                                                               File \"<string>\", line 3, in raise_from                                                                                                                                                  File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 461, in _make_request                        httplib_response = conn.getresponse()                                                                                                                                                 File \"/usr/lib/python3.10/http/client.py\", line 1375, in getresponse                                                                                                                                                                                                                                                                                                                                                                         response.begin()                                                                                                                                                                      File \"/usr/lib/python3.10/http/client.py\", line 318, in begin                                                                                                                                                                                                                                                                                                                                                                               version, status, reason = self._read_status()                                                            File \"/usr/lib/python3.10/http/client.py\", line 287, in _read_status                                                                                                                      raise RemoteDisconnected(\"Remote end closed connection without\"                                                                                                                     http.client.RemoteDisconnected: Remote end closed connection without response                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      During handling of the above exception, another exception occurredraceback (most recent call last):                                                                           File \"/home/workdir/venv/lib/python3.10/site-packages/requests/adapters.py\", line 486, in send                                      resp = conn.urlopen(                                                                                                                                                                                                                                                                                                                                                                                                                     File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 798, in urlopen                              retries = retries.increment(                                                                                                                                                          File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/util/retry.py\", line 550, in increment                                                               raise six.reraise(type(error), error, _stacktrace)                                                                                                                                                                   File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/packages/six.py\", line 769, in reraise                                                              raise value.with_traceback(tb)                                                                           File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 714, in urlopen                                                            httplib_response = self._make_request(                                                                   File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 466, in _make_request                                                      six.raise_from(e, None)                                                                                  File \"<string>\", line 3, in raise_from                                                                     File \"/home/workdir/venv/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 461, in _make_request                                                      httplib_response = conn.getresponse()                                                                    File \"/usr/lib/python3.10/http/client.py\", line 1375, in getresponse                                         response.begin()                                                                                         File \"/usr/lib/python3.10/http/client.py\", line 318, in begin                                                version, status, reason = self._read_status()                                                            File \"/usr/lib/python3.10/http/client.py\", line 287, in _read_status                                         raise RemoteDisconnected(\"Remote end closed connection without\"                                        urllib3.exceptions.ProtocolError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))                                                                                         During handling of the above exception, another exception occurred:                                         Traceback (most recent call last):                                                                           File \"<stdin>\", line 1, in <module>                                                                        File \"/home/workdir/venv/lib/python3.10/site-packages/github/MainClass.py\", line 363, in get_repo                                                                 headers, data = self.__requester.requestJsonAndCheck(\"GET\", url)                                         File \"/home/workdir/venv/lib/python3.10/site-packages/github/Requester.py\", line 443, in requestJsonAndCheck                                                      *self.requestJson(                                                                                       File \"/home/workdir/venv/lib/python3.10/site-packages/github/Requester.py\", line 580, in requestJson                                                              return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)                                                                                                                                     File \"/home/workdir/venv/lib/python3.10/site-packages/github/Requester.py\", line 685, in __requestEncode                                                          status, responseHeaders, output = self.__requestRaw(                                                     File \"/home/workdir/venv/lib/python3.10/site-packages/github/Requester.py\", line 723, in __requestRaw                                                             response = cnx.getresponse()                                                                             File \"/home/workdir/venv/lib/python3.10/site-packages/github/Requester.py\", line 164, in getresponse                                                              r = verb(                                                                                                File \"/home/workdir/venv/lib/python3.10/site-packages/requests/sessions.py\", line 602, in get                                                                     return self.request(\"GET\", url, **kwargs)                                                                File \"/home/workdir/venv/lib/python3.10/site-packages/requests/sessions.py\", line 589, in request                                                                 resp = self.send(prep, **send_kwargs)                                                                    File \"/home/workdir/venv/lib/python3.10/site-packages/requests/sessions.py\", line 703, in send                                                                    r = adapter.send(request, **kwargs)                                                                      File \"/home/workdir/venv/lib/python3.10/site-packages/requests/adapters.py\", line 501, in send                                                                    raise ConnectionError(err, request=request)                                                            requests.exceptions.ConnectionError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))                                                                                     ```  </details>   Another attempt works successfully. As a workaround, I am passing `retry` to constructor: <details>   <summary>See workaround</summary>  ```python >>> g = Github(auth=app_installation_auth, retry=2) >>> g.get_repo(\"myprivate/repository\") Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None) Starting new HTTPS connection (1): api.github.com:443 https://api.github.com:443 \"GET /repos/myprivate/repository HTTP/1.1\" 200 None Repository(full_name=\"myprivate/repository\") >>> # Wait 5 minutes >>> g.get_repo(\"h\") Incremented Retry for (url='/repos/myprivate/repository'): Retry(total=1, connect=None, read=None, redirect=None, status=None) Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))': /repos/myprivate/repository Starting new HTTPS connection (2): api.github.com:443 https://api.github.com:443 \"GET /repos/myprivate/repository HTTP/1.1\" 200 None Repository(full_name=\"myprivate/repository\") ``` </details>  #### Expected outcome I am able to read the repository without retrying.  #### Versions ``` pygithub==1.59.1 ```"
    },
    {
        "title": "Add more lazy results to Repository",
        "body": "Reworks `CompletableGithubObject` to support following features: - It fetches initial complete JSON, which allows to replace ```python headers, data = self.__requester.requestJsonAndCheck(\"GET\", f\"/users/{login}\") return github.NamedUser.NamedUser(self.__requester, headers, data, completed=True) ``` with ```python return github.NamedUser.NamedUser(self.__requester, url=f\"/users/{login}\").do_complete() ``` - It allows to create lazy `CompletableGithubObject` from `url` only, or from partial `data`.  Removes any code related to `CompletableGithubObject` from `NonCompletableGithubObject`.  Fixes #2334, #2736"
    },
    {
        "title": "Add `code_search` to `RateLimit`",
        "body": "There is a separate rate limit for code search: https://docs.github.com/en/rest/rate-limit/rate-limit?apiVersion=2022-11-28  It is not in the `RateLimit` object: ``` (Pdb) gh.get_rate_limit().code_search *** AttributeError: 'RateLimit' object has no attribute 'code_search' ```  But it is available in the data: ``` (Pdb) gh.get_rate_limit().raw_data[\"code_search\"] {'limit': 10, 'used': 0, 'remaining': 10, 'reset': 1693823606} ``` "
    },
    {
        "title": "Please add support for Pull Request templates",
        "body": "We use Pull Request templates and I need to specify an alternative PR template when I open a PR from a script.  As far as I can tell from the code (https://github.com/PyGithub/PyGithub/blob/13cbd1b5722587607ddbda3105cad2c24a0baae3/github/Repository.py#L1382) there is no way to pass through the `template` parameter.  Could you please update the API to support this parameter?  Documentation of the API: https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/using-query-parameters-to-create-a-pull-request"
    },
    {
        "title": "Update sphinx-rtd-theme requirement from <1.1 to <1.4",
        "body": "Updates the requirements on [sphinx-rtd-theme](https://github.com/readthedocs/sphinx_rtd_theme) to permit the latest version.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/readthedocs/sphinx_rtd_theme/blob/master/docs/changelog.rst\">sphinx-rtd-theme's changelog</a>.</em></p>\n<blockquote>\n<h1>1.3.0</h1>\n<h2>Added</h2>\n<ul>\n<li>Relaxed requirements to include Sphinx release <code>7.0</code></li>\n</ul>\n<p>.. _release-1.2.2:</p>\n<h1>1.2.2</h1>\n<h2>Fixes</h2>\n<ul>\n<li>Require <code>sphinxcontrib-jquery&gt;=4,&lt;5</code> (<a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1446\">#1446</a>)</li>\n</ul>\n<h2>Added</h2>\n<ul>\n<li>Styling for <code>:menuselection:</code> (<a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1426\">#1426</a>)</li>\n</ul>\n<p>.. _release-1.2.1:</p>\n<h1>1.2.1</h1>\n<h2>Fixes</h2>\n<ul>\n<li>Load jQuery correctly when using latest sphinxcontrib-jquery release (<a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1448\">#1448</a>)</li>\n</ul>\n<p>.. _release-1.2.0:</p>\n<h1>1.2.0</h1>\n<h2>Dependency changes</h2>\n<ul>\n<li>docutils 0.18 is supported. (<a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1381\">#1381</a>)</li>\n<li>Sphinx 6 support added</li>\n<li>Added <code>sphinxcontrib-jquery</code> as a dependency (<a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1385\">#1385</a> <a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1421\">#1421</a>)</li>\n<li>Python 3.11 is officially supported and tested. (<a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1395\">#1395</a>)</li>\n<li>Python 3.4 and 3.5 are officially not supported (<a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1395\">#1395</a>)</li>\n</ul>\n<p>Changes</p>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/15ed4de08de55f7066ff4f2ac39883a397db30d3\"><code>15ed4de</code></a> Release 1.3.0 (<a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1509\">#1509</a>)</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/b5833585b25358be94918f13c50530e3e9237e7e\"><code>b583358</code></a> 1.3.0rc2 (<a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1495\">#1495</a>)</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/775bca403c4d795504b1c0d7c6d41664bdcba842\"><code>775bca4</code></a> Release 1.3.0rc1 (<a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1494\">#1494</a>)</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/04f85fc42219f8148be142482b9887e64b990f4f\"><code>04f85fc</code></a> Add Sphinx 7 support (<a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1464\">#1464</a>)</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/9899ee4ee2f547f81e51297dc12317f018e62fdd\"><code>9899ee4</code></a> Release 1.2.2 (<a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1484\">#1484</a>)</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/2442ab9ffdb8910f8484362cc8dfd165ca3ffb15\"><code>2442ab9</code></a> Remove version logic on sphinxcontrib-jquery, require &gt;=4,&lt;5 (<a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1446\">#1446</a>)</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/cd6b429f875999ee48bd914da5369422aa55dd8f\"><code>cd6b429</code></a> :menuselection: style (<a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1426\">#1426</a>)</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/2107797b002848b3336694541b14ffa2367afc2c\"><code>2107797</code></a> Contributing updates (<a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1478\">#1478</a>)</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/72691f502500c8fc0c0d22422d0919bc628ddf5f\"><code>72691f5</code></a> Release 1.2.1 (<a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1474\">#1474</a>)</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/d836ff798cb5032b9d32eccc9a86b69bed256975\"><code>d836ff7</code></a> Docs: Typo in recommended pinning (<a href=\"https://redirect.github.com/readthedocs/sphinx_rtd_theme/issues/1476\">#1476</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/readthedocs/sphinx_rtd_theme/compare/0.1.8...1.3.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.\n"
    },
    {
        "title": "Overrides for Objects to remove need for excessive GET calls when leveraging Webhooks?",
        "body": "I am working on automation that takes in a GitHub Webhook Payload and then takes actions based on that.  The payload is for a PR event, and that payload contains all of the information needed for the PR object, Repo object, Organization Object, Enterprise Object, and User object (user that opened the PR or took the action such as closed/re-opened/etc).  However, with the way the SDK seems to be, I cannot \"new up\" a PR object for example from this data, and instead need to do a GET request to the API to get the PR, even though I have the contents needed in the webhook.  Can we find a way to leverage JSON webhook payloads to new up objects instead of having to do additional GET calls?"
    },
    {
        "title": "[Feature request] Add support for repo.has_discussions",
        "body": "The Github API endpoints for [Get Repository](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#get-a-repository) and [Update Repository](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#update-a-repository) have an attribute/parameter called `has_discussions`, but this property isn't implemented in the PyGithub [repository object](https://pygithub.readthedocs.io/en/stable/github_objects/Repository.html?highlight=repo%20has_issues#repository).  Could this property please be implemented to make it possible to enable/disable and check the status of repos' Discussions with this library?"
    },
    {
        "title": "Method for getting dependency-graph/sbom",
        "body": "Is there any method to get dependency-graph for repo?"
    },
    {
        "title": "Support adding attribute lists",
        "body": "Allows to add list-type attributes to `GithubObjects`.  Includes #2726, rebase after that has been merged."
    },
    {
        "title": "Improve fix headers",
        "body": "Adds more exclusions to the script, fixes some bugs."
    },
    {
        "title": "Add import for new class attribute",
        "body": "Adding a class attribute which type has not been imported yet requires adding the respective import.  Further, class attributes are forced to not include the module, e.g. `NamedUser` instead of `github.NamedUser.NamedUser`.  This relies on precommit cleaning up import order and redundancies.  Tested with      python scripts/add_attribute.py Commit test class NamedUser     python scripts/add_attribute.py Commit test class github.NamedUser.NamedUser  Adds:  ```patch @@ -44,6 +44,7 @@ import github.GitCommit  import github.NamedUser  import github.PaginatedList  from github.GithubObject import Attribute, CompletableGithubObject, NotSet, Opt, is_optional +from github.NamedUser import NamedUser  from github.PaginatedList import PaginatedList    if TYPE_CHECKING: @@ -75,6 +76,7 @@ class Commit(CompletableGithubObject):          self._sha: Attribute[str] = NotSet          self._stats: Attribute[CommitStats] = NotSet          self._url: Attribute[str] = NotSet +        self._test: Attribute['NamedUser'] = NotSet        def __repr__(self) -> str:          return self.get__repr__({\"sha\": self._sha.value}) @@ -124,6 +126,11 @@ class Commit(CompletableGithubObject):          self._completeIfNotSet(self._stats)          return self._stats.value   +    @property +    def test(self) -> 'NamedUser': +        self._completeIfNotSet(self._test) +        return self._test.value +      @property      def url(self) -> str:          self._completeIfNotSet(self._url) @@ -283,5 +290,7 @@ class Commit(CompletableGithubObject):              self._sha = self._makeStringAttribute(attributes[\"sha\"])          if \"stats\" in attributes:  # pragma no branch              self._stats = self._makeClassAttribute(github.CommitStats.CommitStats, attributes[\"stats\"]) +        if \"test\" in attributes:  # pragma no branch +            self._test = self._makeClassAttribute(NamedUser, attributes[\"test\"])          if \"url\" in attributes:  # pragma no branch              self._url = self._makeStringAttribute(attributes[\"url\"]) ````"
    },
    {
        "title": "Print usage when no arguments given to add_attribute script",
        "body": null
    },
    {
        "title": "Fix attrName extraction to keep attribute order in initAttributes",
        "body": "The `add_attribute.py` script does not maintain attribute order of attributes in `_initAttributes` that follow new coding style (e.g. `self._key: Attribute[str] = NotSet`).  Tested with:      python scripts/add_attribute.py Commit test string  Was:  ```patch @@ -75,6 +75,7 @@ class Commit(CompletableGithubObject):          self._sha: Attribute[str] = NotSet          self._stats: Attribute[CommitStats] = NotSet          self._url: Attribute[str] = NotSet +        self._test: Attribute[str] = NotSet        def __repr__(self) -> str:          return self.get__repr__({\"sha\": self._sha.value}) ```  Now:  ```patch @@ -74,6 +74,7 @@ class Commit(CompletableGithubObject):          self._parents: Attribute[list[Commit]] = NotSet          self._sha: Attribute[str] = NotSet          self._stats: Attribute[CommitStats] = NotSet +        self._test: Attribute[str] = NotSet          self._url: Attribute[str] = NotSet        def __repr__(self) -> str: ```"
    },
    {
        "title": "GitHub Copilot for Business (GHEC) Endpoints",
        "body": "There are a number of [beta endpoints for GitHub Copilot for Business](https://docs.github.com/en/enterprise-cloud@latest/rest/copilot/copilot-for-business?apiVersion=2022-11-28) available now.  We'd like to leverage PyGitHub to interact with these endpoints."
    },
    {
        "title": "Feature Request: Github Branch Rulesets",
        "body": "Github recently released a new feature called rulesets:  https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/about-rulesets  Rulesets are available in the REST and GraphQL APIs: * https://docs.github.com/en/rest/repos/rules?apiVersion=2022-11-28#get-all-repository-rulesets * https://docs.github.com/en/graphql/reference/mutations#createrepositoryruleset  It's still a new feature but at some point in the future I'd like to add it to our automation scripts.  I haven't yet looked at the source of PyGithub to see how difficult it would be for me to add this. I'm not an expert Python coder but I can copy and paste REST API calls and edit names, so I _may_ be able to add this if no one else is able to. I didn't see any PRs or other Issues that mention rulesets. I hope it's OK that I created this ticket."
    },
    {
        "title": "Inquiry about Retrieving Branch Creation Time using PyGitHub",
        "body": "Hello GitHub Community,  I hope this message finds you well. I am currently working on a project where I need to retrieve the creation time of branches in a GitHub repository using the PyGitHub library. While I have been able to gather a lot of useful information through the library, I haven't been able to find a direct method to access the creation time of a branch.  I have already explored the PyGitHub documentation and forums, but I'm unable to locate any explicit guidance regarding this specific aspect. Could anyone kindly guide me on how to retrieve the creation time of a branch programmatically using PyGitHub or any related tools? I would greatly appreciate it if someone could provide me with the syntax or any example code that accomplishes this.    "
    },
    {
        "title": "feat: manage require_last_push_approval and allow_deletions in branch protection",
        "body": "fixes #2360 "
    },
    {
        "title": "Can\u2019t manage teams with find grained personal access token",
        "body": "Even though I have given the token all repositories access and \u201cAdministration\u201d read-write.    github.GithubException.GithubException: 403 {\"message\": \"Resource not accessible by personal access token\", \"documentation_url\": \"https://docs.github.com/rest/teams/teams#list-teams\"}  I have tried classic token as well. Big blocker for me"
    },
    {
        "title": "Add `include_all_branches` field to create repo from template function",
        "body": "Adds the boolean `include_all_branches` to the request object being sent in the create from template request. This has been in the API spec for a while.  I was unable to get a test account to record the new outputs of the tests as a lot of the organization tests are associated with an organization I cant see."
    },
    {
        "title": "Reposity.update_file() mismatched content with content SHA",
        "body": "`Repository.update_file()` does the PUT to update content as per the GH API documentation, but then does a separate GET to try and retrieve the updated content (at least, I presume this was the intention), since Github doesn't return that in it's response. It looks like the URL used to retrieve the GET (just \"url\" in the API response) is not SHA-speciifc, so the content can sometimes be old, depending on how quickly Github's backend/storage gets updated. In my testing, this can sometimes be quite awhile (10+ seconds with a file that is around 300K). Because the updated content SHA returned by the PUT is not checked against the content SHA returned by the GET, no exception is raised.  My 2 proposed solutions would be:  1. Use a URL in the GET that references the SHA returned by the PUT, instead of a generic URL that only references the file/branch. It looks like multiple URLs are returned by the API, one of which might be a better choice. 2. Forego returning content completely in `update_file()`, since the API doesn't return this and it doesn't really make much sense, since any call to `update_file()` requires the content that would be updated in the first place.  If either of these sound good or if there are any alternative suggestions, I'd be more than happy to submit a PR."
    },
    {
        "title": "Add missing params on get_workflow_runs() ",
        "body": " The function [get_workflow_runs()](https://github.com/PyGithub/PyGithub/blob/48d2009c8141e3e32def3db35ecf7d91ce1e687a/github/Repository.py#L3221-L3228) is missing several important [params from the API](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow). The following params are currently missing:  - `per_page`\u00a0(integer): The number of results per page, defaults to\u00a030 (max 100).  - `page`\u00a0(integer): Page number of the results to fetch, default\u00a01. - `created`\u00a0(string): Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax.](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)\" (**datetime would be awesome here as mentioned by** @trim21 ) - `check_suite_id`\u00a0(integer): Returns workflow runs with the\u00a0check_suite_id\u00a0that you specify.  "
    },
    {
        "title": "Add support for global advisories and unify some shared logic with repository advisories",
        "body": "This PR adds support for the new Global Advisories api: https://docs.github.com/en/rest/security-advisories/global-advisories. It adds the `get_global_advisory` and `get_global_advisories` methods.  It creates a new `GlobalAdvisory` class  and pulls the shared fields into a class both Global and Repository Advisories inherit from. The payloads of the Global and Repository Advisories are similar, but not quite the same. Repository Advisories have fields designed to allow users to submit using the payloads that are returned. Global Advisories have additional fields that do not apply to advisories attached to a repository. I also implemented a few more fields that are present in both, but were not included (CVSS and identifiers).  I have attempted to follow the code style in the other files, happy to update anything where I'm not following convention.   -----  The fact that I renamed some of the files means that the header script is removing the copyright from anyone who was listed in the original file, which seems wrong. But, I'm not sure what the right fix is, any manual editing would be overwritten by the next person to run the script.  Side note: `script/fix_headers.py` adds `# -*- coding: utf-8 -*-` which is then removed by the `pyupgrade` step of the pre-commit hooks."
    },
    {
        "title": "repo.create_autolink() alphanumeric",
        "body": "Creating a autolink for a repo [accepts 2 arguments](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html?highlight=autolink#github.Repository.Repository.create_autolink) ('key_prefix' and 'url_template') but it doesn't accept alphanumeric as the GitHub UI and API does.   ```create_autolink(key_prefix, url_template)```  I need to set alphanumeric=False  so it is numeric only.  pygithub v1.59.0 "
    },
    {
        "title": "feat: add commit title and message params to Organization.create_repo",
        "body": "adds commit title and message params to Organization.create_repo, to match the `Repository` class updates added in #2742  resolves #2403 "
    },
    {
        "title": "[Bug] Organization.get_members() and Organization.get_public_members() return 404",
        "body": "When I tried to use `Organization.get_members()` and `Organization.get_public_members()` to fetch `totalCount` data I want, these two methods returns `404` error code no matter which organization I was trying to access. But the [corresponding GitHub REST API ](https://docs.github.com/en/rest/orgs/members?apiVersion=2022-11-28#list-organization-members)works fine.  Here is my code:  > from github import Github, GithubException, RateLimitExceededException    g = Github(\"MY_TOKEN\")    repo = g.get_repo(\"apple/swift\")    org = repo.organization    print(org.get_members().totalCount)    print(org.get_public_members().totalCount)  [Here](https://api.github.com/orgs/apple/members) is the corresponding GitHub REST API which works fine.  Please fix it, thanks!  "
    },
    {
        "title": "Add typing style contributing guide",
        "body": null
    },
    {
        "title": "Add myself to MAINTAINERS",
        "body": null
    },
    {
        "title": "Extend `add_attribute.py` script with typing",
        "body": "Now that we embed typing in our `py` files, the `scripts/add_attribute.py` file should be updated.  https://github.com/PyGithub/PyGithub/blob/main/scripts/add_attribute.py"
    },
    {
        "title": "precommit: add docformatter",
        "body": "let's get unify the docstrings  cc: @EnricoMi "
    },
    {
        "title": "update precommit & apply",
        "body": "running `pre-cimmit autopudate` and apply new versions plus a few manual fixed asked by flake8  cc: @EnricoMi "
    },
    {
        "title": "CI: drop precommit job, use bot, move docs into CI workflow",
        "body": "Moving docs build to CI checks as this is not much lint but real check Also, I may suggest installing recommit [bot](https://precommit.ci/) instead of GH action which has the advantage of eventually automatically fixing open PRs  cc: @EnricoMi "
    },
    {
        "title": "Support GraphQL closingIssuesReferences",
        "body": "Hi there, the GitHub API supports the concept of closingIssuesReferences (see https://docs.github.com/en/graphql/reference/objects#pullrequest) which is the way to link an issue to be closed automatically when a PR fixes it.  Is it possible to implement it in the PyGithub library as well? "
    },
    {
        "title": "Organization.cancel_invitation() argument should be invitation instead of invitee",
        "body": "`organization.cancel_invitation()` takes `invitee` as argument, however the underlying Github API epects an `invitation.id`. So the method header is a bit misleading:  ``` python  def cancel_invitation(self, invitee):         \"\"\"         :calls: `DELETE /orgs/{org}/invitations/{invitation_id} <https://docs.github.com/en/rest/reference/orgs#cancel-an-organization-invitation>`_         :param invitee: :class:`github.NamedUser.NamedUser`         :rtype: None         \"\"\"         assert isinstance(invitee, github.NamedUser.NamedUser), invitee         status, headers, data = self._requester.requestJson(             \"DELETE\", f\"{self.url}/invitations/{invitee.id}\"         )         return status == 204 ```  Instead of `invitee` the argument should be named `invitation`. All the other parts of the method as well as the tests use `invitation` See https://github.com/PyGithub/PyGithub/commit/53fb49882f34c63ef2437460a9bb64b91e94cec3  It took me some time to realize, that the following is not working, even though `user` and `invitation` / `invitee` are both of type `NamedUser`. But the `user` has a different id than the `invitation` ``` python # DOES NOT WORK user = github.get_user('octocat') org = github.get_organization('github') org.cancel_invitation(user) ```  Example implementation which works: ``` python # WORKS user = github.get_user('octocat') org = github.get_organization('github') for invitation in org.invitations():     if user.login == invitation.login:         org.cancel_invitation(invitation) ```  In the end I wonder, what was the intention to name it `invitee`?"
    },
    {
        "title": "`PaginatedList.totalCount` shows maximum of 30.000 objects",
        "body": "Hi all,  I've encountered a strange behaviour for PaginatedList.totalCount. The counter seems to max at 30.000 - no matter the actual number of events.   In my case this is observed for get_repo().get_issue_comments() and get_repo().get_issue_events()   <img width=\"679\" alt=\"image\" src=\"https://github.com/PyGithub/PyGithub/assets/29239149/9d7c2e21-ccfb-4cca-8ee3-8cfa75a5811f\">  Does this happen for anyone else? Is this a GitHub API restriction? Is there a way around?  Cheers!"
    },
    {
        "title": "Inconsistent pagination behavior between `get_repos()` and `repo.get_collaborators()`",
        "body": "I was writing some code today that relied heavily on `get_repos()` and `repo.get_collaborators()` and found that the pagination behavior for these two functions differs. The Docs for both [get_repos](https://pygithub.readthedocs.io/en/latest/github.html?highlight=get_repos#github.MainClass.Github.get_repos) and [repo.get_collaborators](https://pygithub.readthedocs.io/en/latest/utilities.html#github.PaginatedList.PaginatedList) show the return type to be a [github.PaginatedList.PaginatedList](https://pygithub.readthedocs.io/en/latest/utilities.html#github.PaginatedList.PaginatedList).   The API Docs for both [get_repos](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-organization-repositories) and [get_collaborators](https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28) list a `per_page integer` of 100 and a `Default` of 30.  However, when called against an org with 11,000+ repos and a repo with 3,000+ collaborators, `get_repos()` seems to return all 11K and `get_collaborators()` only returns large but random sized chunks (160-700 observed).   This is definitely a nit, but its also one that I'm happy to help track down :-) It may also be a GitHub API bug, in which case I'd be happy to help track that down on our side.   Unfortunately, I don't have any debug logs, as I already completed the task I was working on. I could probably cobble together a test org/repo if y'all think those logs would be helpful.   Is this something that anyone else has noticed?   Thanks!"
    },
    {
        "title": "Add `rerequest` endpoint to `CheckRun` model. ",
        "body": "This exists on the `CheckSuite` model but not on the `CheckRun` model even though it is similarly supported by Github API. https://docs.github.com/en/rest/checks/runs?apiVersion=2022-11-28#rerequest-a-check-run"
    },
    {
        "title": "feature: commit head branches",
        "body": "### Commit Head Branches  Add support to list branches for head commit. [REF](https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28#list-branches-for-head-commit)  #### Summary of Changes  - Added method to Repository to support `get_commit_head_branches` - Created a `CommitHeadBranch` model, which includes `github.CommitHeadBranch.HeadCommit` for object support of the response schema - Added test cases to Repository for validation  Resolves #2536 "
    },
    {
        "title": "Enhancement: add support for list commit head branches",
        "body": "Add support for listing the branches of a head commit: https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28#list-branches-for-head-commit"
    },
    {
        "title": "Not possible to clear `due_on` on milestones",
        "body": "Reproduction: ```python repo = Github(...).get_repo(\"abcd\") repo.get_milestone(1234).edit(   title=new_title,   # due_on=None,  # This fails on an assert on type of `due_on`   # due_on=NotSet,  # Doesn't update (also not a great pattern, if I've understood the docs correctly) ) ```"
    },
    {
        "title": "AuthenticatedUser.create_repo_from_template is missing from AuthenticatedUser.pyi",
        "body": "As the title says, the create_repo_from_template method merged with PR #2090 Is missing from the AuthenticatedUser.pyi this is causing some typechecking issues for me "
    },
    {
        "title": "proposal: migrate project to python-poetry",
        "body": "https://python-poetry.org/  this help to manage deps"
    },
    {
        "title": "How do i download a file from a commit?",
        "body": "The `commit.files` object has an attribute `raw_url`, but the url returned is not the actual raw URL, so I cannot get that file from Python.   ``` >>> f.raw_data['raw_url'] 'https://github.com/user/repo/raw/f632224c1116casdftrh359815c7e5c27cf957/filepath.yml' ```  when i open the link in a browser, it redirects to the raw URL (https://raw.githubusercontent.com/....) but this does not help in downloading the file from python.  Is there a way to download a file from a commit? "
    },
    {
        "title": "Upstream Dependency Breakage",
        "body": "When importing your module my team ran into the following traceback error:  ``` File \"/home/travis/virtualenv/python3.8.13/lib/python3.8/site-packages/github/__init__.py\", line 58, in <module>     from github.GithubIntegration import GithubIntegration   File \"/home/travis/virtualenv/python3.8.13/lib/python3.8/site-packages/github/GithubIntegration.py\", line 11, in <module>     from github.Requester import Requester   File \"/home/travis/virtualenv/python3.8.13/lib/python3.8/site-packages/github/Requester.py\", line 64, in <module>     import requests   File \"/home/travis/virtualenv/python3.8.13/lib/python3.8/site-packages/requests/__init__.py\", line 43, in <module>     import urllib3   File \"/home/travis/virtualenv/python3.8.13/lib/python3.8/site-packages/urllib3/__init__.py\", line 38, in <module>     raise ImportError( ImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with OpenSSL 1.0.2g  1 Mar 2016. See: https://github.com/urllib3/urllib3/issues/2168 ```  I believe it's coming from your usage of the requests library and is reflected in their own issue https://github.com/psf/requests/issues/6432, just thought you should be aware."
    },
    {
        "title": "Update sphinx requirement from <3 to <8",
        "body": "Updates the requirements on [sphinx](https://github.com/sphinx-doc/sphinx) to permit the latest version.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/sphinx-doc/sphinx/releases\">sphinx's releases</a>.</em></p>\n<blockquote>\n<h2>v7.0.0</h2>\n<p>Changelog: <a href=\"https://www.sphinx-doc.org/en/master/changes.html\">https://www.sphinx-doc.org/en/master/changes.html</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/sphinx-doc/sphinx/blob/master/CHANGES\">sphinx's changelog</a>.</em></p>\n<blockquote>\n<h1>Release 7.0.0 (released Apr 29, 2023)</h1>\n<h2>Incompatible changes</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11359\">#11359</a>: Remove long-deprecated aliases for <code>MecabSplitter</code> and\n<code>DefaultSplitter</code> in <code>sphinx.search.ja</code>.</li>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11360\">#11360</a>: Remove deprecated <code>make_old_id</code> functions in domain object\ndescription classes.</li>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11363\">#11363</a>: Remove the Setuptools integration (<code>build_sphinx</code> hook in\n<code>setup.py</code>).</li>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11364\">#11364</a>: Remove deprecated <code>sphinx.ext.napoleon.iterators</code> module.</li>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11365\">#11365</a>: Remove support for the <code>jsdump</code> format in <code>sphinx.search</code>.</li>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11366\">#11366</a>: Make <code>locale</code> a required argument to\n<code>sphinx.util.i18n.format_date()</code>.</li>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11370\">#11370</a>: Remove deprecated <code>sphinx.util.stemmer</code> module.</li>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11371\">#11371</a>: Remove deprecated <code>sphinx.pycode.ast.parse()</code> function.</li>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11372\">#11372</a>: Remove deprecated <code>sphinx.io.read_doc()</code> function.</li>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11373\">#11373</a>: Removed deprecated <code>sphinx.util.get_matching_files()</code> function.</li>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11378\">#11378</a>: Remove deprecated <code>sphinx.util.docutils.is_html5_writer_available()</code>\nfunction.</li>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11379\">#11379</a>: Make the <code>env</code> argument to <code>Builder</code> subclasses required.</li>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11380\">#11380</a>: autosummary: Always emit grouped import exceptions.</li>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11381\">#11381</a>: Remove deprecated <code>style</code> key for HTML templates.</li>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11382\">#11382</a>: Remove deprecated <code>sphinx.writers.latex.LaTeXTranslator.docclasses</code>\nattribute.</li>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11383\">#11383</a>: Remove deprecated <code>sphinx.builders.html.html5_ready</code> and\n<code>sphinx.builders.html.HTMLTranslator</code> attributes.</li>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11385\">#11385</a>: Remove support for HTML 4 output.</li>\n</ul>\n<h1>Release 6.2.1 (released Apr 25, 2023)</h1>\n<h2>Bugs fixed</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11355\">#11355</a>: Revert the default type of :confval:<code>nitpick_ignore</code> and\n:confval:<code>nitpick_ignore_regex</code> to <code>list</code>.</li>\n</ul>\n<h1>Release 6.2.0 (released Apr 23, 2023)</h1>\n<h2>Dependencies</h2>\n<ul>\n<li>Require Docutils 0.18.1 or greater.</li>\n</ul>\n<h2>Incompatible changes</h2>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/d568b2f4f7cca743fcbf70814d15602d8129b790\"><code>d568b2f</code></a> Bump to 7.0.0 final</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/ff79edf353f5cc6e02036f58e0295dc704c5e681\"><code>ff79edf</code></a> Remove <code>jsdump</code> references post removal</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/1a5133ac391931d8e0e2a271fe8ea9c505176908\"><code>1a5133a</code></a> Bump to 7.0.0rc1 final</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/5795fc7f9f7a5fe968cd11b961fc33fbd952a152\"><code>5795fc7</code></a> Update <code>sphinx.deprecation</code> for Sphinx 7.0 (<a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11386\">#11386</a>)</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/6202087f912a2ae32808865072f884ea44cd31cb\"><code>6202087</code></a> Add a note to CHANGES for PR 11385</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/ad473730a3763f241e9aaea1a87d1893f01b86fd\"><code>ad47373</code></a> Remove HTML 4 support (<a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11385\">#11385</a>)</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/3e3251d3ba4f1e5fa6d34d995505f4d3ace5acad\"><code>3e3251d</code></a> Remove <code>HTMLTranslator</code> and <code>html5_ready</code> from <code>sphinx.builders.html</code> (...</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/77fd819a09881102bdd48593cc69ec164b2495c8\"><code>77fd819</code></a> Remove deprecated <code>LaTeXTranslator.docclasses</code> attribute (<a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11382\">#11382</a>)</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/4be56f3b7ddf44265d2e7a8f26a33ba46be52ab9\"><code>4be56f3</code></a> Remove deprecated <code>style</code> key for HTML templates (<a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11381\">#11381</a>)</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/49027a9ae61d0d00016182025f68239a50ba4c09\"><code>49027a9</code></a> Autosummary: Always emit grouped <code>ImportError</code> exceptions (<a href=\"https://redirect.github.com/sphinx-doc/sphinx/issues/11380\">#11380</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/sphinx-doc/sphinx/compare/v0.1.61611...v7.0.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.\n"
    },
    {
        "title": "missing method for getting an action log",
        "body": "github.WorkflowRun.WorkflowRun should have a method: `get_raw_log()`  This should call _Download workflow run logs_ according to https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#download-workflow-run-logs Response is a link that expires after 1 minute.  A simple GET Request to this link with the provided authentication credentials should return the raw log.  Did i miss anything?"
    },
    {
        "title": "Refreshing AppAuthentication ends in infinite recursion",
        "body": "As noted in https://github.com/PyGithub/PyGithub/issues/2447#issuecomment-1470842064, refreshing the token enters an inifnite recursion."
    },
    {
        "title": "Does PyGithub support auto-merge?",
        "body": "Our repos usually have auto merge enabled ([doc](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request)). We are also trying a new [merge queue](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request-with-a-merge-queue) mechanism in beta. It seems the web UI button sends a POST request to `https://github.com/<repo>/pull/<pr_number>/auto_merge_requests` with parameter `do: squash` or `do: group`. I didn't find PyGithub documentation mentioning these merge methods, nor `auto_merge_requests` string in the project. Are they supported right now?"
    },
    {
        "title": "GET-ing non-existent tag doesn't raise `UnknownObjectException`",
        "body": "I read the documents of PyGithub and GitHub. [Getting a reference](https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#get-a-reference) should return 404 as the requested reference doesn't exist, and PyGithub will raise `UnknownObjectException`. However, it seems not working.  The following code runs `edit` though there isn't a tag called `v1`. ```py try:     repo.get_git_ref('tags/v1').edit(sha) except UnknownObjectException:     repo.create_git_ref('refs/tags/v1', sha) ```"
    },
    {
        "title": "feat: Adding type stub for create_repo_from_template",
        "body": "Changes to help PyGithub work properly with mypy for create_repo_from_template function.  "
    },
    {
        "title": "This is a test issue",
        "body": "\nissue_type: bq_export\n\nBIGQUERY CONFIGURATION\nbq_project: replace_by_your_project_name\nbq_dataset: replace_by_your_dataset_name\nbq_table: replace_by_your_table_name\n\nSNOWFLAKE CONFIGURATION\nsnf_database: replace_by_your_snowflake_database\nsnf_table: replace_by_your_snowflake_table\n\nEXTRACTOR CONFIGURATION\ntable_fields: ALL_COLUMNS\n"
    },
    {
        "title": "ConnectionRefusedError when calling Github API with Pygithub",
        "body": "Hi  I am using Pygithub to get data about repos in my database, and midway through the script I got the following error:  ```  ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response')) [2023-04-04, 22:10:12 UTC] {subprocess.py:93} INFO - HTTPSConnectionPool(host='api.github.com', port=443): Max retries exceeded with url: /rate_limit (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f7e76da97e0>: Failed to establish a new connection: [Errno 111] Connection refused')) [2023-04-04, 22:10:12 UTC] {subprocess.py:93} INFO - Some other exception [2023-04-04, 22:10:12 UTC] {subprocess.py:93} INFO - Minato [2023-04-04, 22:10:12 UTC] {subprocess.py:93} INFO - Traceback (most recent call last): [2023-04-04, 22:10:12 UTC] {subprocess.py:93} INFO -     conn = connection.create_connection( [2023-04-04, 22:10:12 UTC] {subprocess.py:93} INFO -     raise err [2023-04-04, 22:10:12 UTC] {subprocess.py:93} INFO -     sock.connect(sa) [2023-04-04, 22:10:12 UTC] {subprocess.py:93} INFO - ConnectionRefusedError: [Errno 111] Connection refused ```  I am guessing that the API endpoint was down at that point and this is why this error came up? Or did I retry it multiple times?  Or is there some other reason?"
    },
    {
        "title": "repo",
        "body": "We want to be able to create standardized repositories in my company and we have rules that each repository needs some branch protection rules e.g. on release/* set up. How to add branch protection rule on these nonexistent branches (containing asterisk) with this library?"
    },
    {
        "title": "Connecting with company github",
        "body": "This code will work fine when i am using my personal git hub account but when i am using the company github account like \"github.company_name.com\" then not able to connect with it:  ```python import base64 from github import Github from pprint import pprint  # Github username username = \"x4nth055\" # pygithub object g = Github() # get that user by username user = g.get_user(username)  for repo in user.get_repos():     print(repo) ```  I want to fetch the file content of some repositories files."
    },
    {
        "title": "Searching for string in code",
        "body": "Hi All;  I'm trying to do the following search using pyGitHub. The search I'm trying to replicate is, \" https://github.com/search?p=1&q=disp_service&type=Code \".  Thanks"
    },
    {
        "title": "Support Oauth apps with Github Enterprise",
        "body": "Hi, I see `github.com` hardcoded in [places like this](https://github.com/PyGithub/PyGithub/blob/822fc05cd5aaf20c87317b32cd897b5a95bd8c60/github/ApplicationOAuth.py#L75). Are you open to a feature request that supports Oauth apps with Github Enterprise where the API URL is something else like https://my-ghe.example.com/login/oauth/authorize?client_id=XXX?"
    },
    {
        "title": "Mocking multiple Testfile with Pygithub",
        "body": "I am trying to mock github file for out python test cases as per below code -   ``` def first_file():     \"\"\"     Returns the contents of the first file found in the git repo     using mocked data     \"\"\"     values = b\"\"\" this is a test file one     \"\"\"     contents1 = ContentFile.ContentFile     contents1.path = \"first.txt\"     contents1.decoded_content = values     contents1.sha = \"mock_sha\"     return contents1  def second_file():     \"\"\"     Returns the contents of the second file found in the git repo     using mocked data     \"\"\"     values = b\"\"\" this is a test file two which holds data more than first one     \"\"\"     contents2 = ContentFile.ContentFile     contents2.path = \"second.txt\"     contents2.decoded_content = values     contents2.sha = \"mock_sha\"     return contents2 ```  But when mocking, both files have the second_file data which I assume due to class ContentFile.ContentFile.  I know this is not an issue but did not find any example on the documentation around mocking the data hence, asking here. "
    },
    {
        "title": "Add method to remove team from repository",
        "body": null
    },
    {
        "title": "fix(types): :label: align push restriction change stubs with impl",
        "body": "In #1290 we changed the verbs in the methods for `def .*_{user,team}_push_restrictions` from `edit` to `replace`  It looks like we missed that change to the method implimentation in the typestubs. This PR re-synchronizes them.  implimentations at https://github.com/PyGithub/PyGithub/blame/master/github/Branch.py#L439 and https://github.com/PyGithub/PyGithub/blame/master/github/Branch.py#L472   (as far as I can tell, the pyi stub files didn't exist at time of #1290)"
    },
    {
        "title": "URL is none repos for private domain",
        "body": "I'm trying to create a pull request to a repo in privately hosted github but it's not able to set the URL correctly:  ``` g = Github(base_url=\"https://<private-github>.com/api/v3\", login_or_token=\"<token>\") repo = g.get_repo(\"org/repo\") pr = repo.create_pull(title=\"Test PR\", body=\"Test body\", head=\"new\", base=\"main\") ``` Gives me the following error: ``` Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>   File \"/Users/ag/miniconda3/envs/py38/lib/python3.8/site-packages/github/Repository.py\", line 1400, in create_pull     return self.__create_pull_1(*args, **kwds)   File \"/Users/ag/miniconda3/envs/py38/lib/python3.8/site-packages/github/Repository.py\", line 1431, in __create_pull_1     return self.__create_pull(   File \"/Users/ag/miniconda3/envs/py38/lib/python3.8/site-packages/github/Repository.py\", line 1444, in __create_pull     headers, data = self._requester.requestJsonAndCheck(   File \"/Users/ag/miniconda3/envs/py38/lib/python3.8/site-packages/github/Requester.py\", line 401, in requestJsonAndCheck     *self.requestJson(   File \"/Users/ag/miniconda3/envs/py38/lib/python3.8/site-packages/github/Requester.py\", line 501, in requestJson     return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)   File \"/Users/ag/miniconda3/envs/py38/lib/python3.8/site-packages/github/Requester.py\", line 566, in __requestEncode     url = self.__makeAbsoluteUrl(url)   File \"/Users/ag/miniconda3/envs/py38/lib/python3.8/site-packages/github/Requester.py\", line 640, in __makeAbsoluteUrl     assert o.hostname in [ AssertionError: None  ```  I checked the `self._url` value in `__makeAbsoluteUrl` function and it's set to `None/pulls`. I noticed the same error on calling any other function, like `repo.get_branches()`.  Any advise will be appreciated."
    },
    {
        "title": "Support for organization variables",
        "body": "adding support for  organization variables `/orgs/{org}/actions/variables`  https://docs.github.com/en/rest/actions/variables?apiVersion=2022-11-28#about-variables-in-github-actions"
    },
    {
        "title": "milestone argument for Repository.get_commits(...)",
        "body": "I'd like to get all commits that were closed on a certaing milestone. the argument does not exist. Is this supposed to work in another way? ex: `changes = repo.get_commits(milestone=some_milestone)`"
    },
    {
        "title": "Safer repository creation and deletion",
        "body": "I don't know what the exact scope of pygithub is e.g. if it tries to wrap GH operations into safety when they're underspecified or wonky, but I want to report an issue which I've noticed happens from time to time in github: the API is not globally consistent.  Usually operations run quite quickly and when a change is performed through the API it's immediately visible through the same, however from time to time that is not the case, events (webhooks) can trigger before the operation has returned, and changes can take some time to propagate.  Around repositories, two of the more frustrating issues are:  - The creation of a repository can take time to propagate and be visible after the `create_repo` call has returned, I've not logged the worst delays but at least several seconds, I think having some sort of backoff and only returning from `create_repo` when the repository is \"externally visible\" (a HEAD request on the repo's url returns a 200) would be a good idea. - Even after the repository is visible, there are background setup processes which run, and can prevent the repository's deletion until they are done running, usually this is not an issue as there are interactions with the repository inbetween, but in some cases it can be a problem, IME in the case where ongoing processing blocks deletion the API returns a 403, so `delete` can just retry (with some sleeping) until either the deletion succeeds, or it fails with a 404 (as from time to time the github api will return errors but still go through, though I've mostly observed that when creating PRs)."
    },
    {
        "title": "Download Release Asset?",
        "body": "Can't reopen #1541 and my post to it doesn't seem to be attracting any attention.  It seems like the ability to download a release asset would be a good thing.  Here is what I think it needs:  1.  Add the function ```download_asset(self, path)``` to GitReleaseAsset.py (and .pyi).  This function just calls requestFile() in its _requester object. 2. Add the implementation of ```requestFile(self, verb, url, parameters, cnx, path)``` to Requester.py (and.pyi).  For this particular function verb, parameters, and cnx are not really needed.  The other functions in GitReleaseAsset don't seem to be passing in cnx and just get a new one from the requester.  The verb isn't really needed for this function, but might be needed for something in the future?  Not really sure what else I might be missing.  Is there anyone willing to do a review of a PR?"
    },
    {
        "title": "Parameter name change in create_review_comment.",
        "body": "Intuitively, commit_id refers to the sha of the commit, but it is the commit object itself that is required here."
    },
    {
        "title": "Fixing existing stubs",
        "body": "Adds `stubtest` to tox and CI, finds 98 stub related errors. Ignoring missing stubs, we are at 48 errors."
    },
    {
        "title": "Unsupported encoding error (large files)",
        "body": "I believe this library used to provide an error when the file the user was trying to access was too large to be returned. Now, instead, it returns empty content and eventually shows an AssertionError about some unsupported encoding of \"none\" (decoded_content property).   ``` from github import Github  g = Github() repo = g.get_repo(...) file_content = repo.get_contents(...) decoded_content = file_content.decoded_content.decode()  # File \"...\\lib\\site-packages\\github\\ContentFile.py\", line 59, in decoded_content #     assert self.encoding == \"base64\", f\"unsupported encoding: {self.encoding}\" # AssertionError: unsupported encoding: none ```  I didn't expect my file to eventually become so heavy, and this error is pretty confusing. It would be worthwhile to change it."
    },
    {
        "title": "Don't make a request to populate a missing `Issue.pull_request` field",
        "body": "When querying issues from GitHub's REST API, pull requests are counted as issues, and the recommended way to tell whether an issue is a pull request is to consult its `pull_request` field.  However, it seems that GitHub omits this field entirely on non-PR issues; as a result, when accessing the `pull_request` property on an `Issue` instance, PyGithub makes an API request to try to fill in the field.  This is wasteful and slows things down.  It would be better if the `Issue` class always treated a missing `pull_request` field as `None` without having to make an API request to confirm it."
    },
    {
        "title": "RateLimitExceededException not raised when rate limit exceeds via making many PRs",
        "body": "When the rate limit is exceeded using by making too many PRs, the `RateLimitExceededException` is not raised, instead it is a `GithubException`. I would expect that it would be the rate limit exception, given it's a 403 and gives the rate limit exceeded exception: ``` 403 {\"documentation_url\": \"https://docs.github.com/en/free-pro-team@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits\", \"message\": \"You have exceeded a secondary rate limit. Please wait a few minutes before you try again.\"} ```   Example code: ```py def create_branch(repo, branch_name):     sb = repo.get_branch(repo.default_branch)     repo.create_git_ref(ref='refs/heads/' + branch_name, sha=sb.commit.sha)  def exceed():     for i in range(100):         repo = g.get_repo(\"mhoeger/test\")         branch = f\"mhoeger/test-branch-{time.time()}\"         create_branch(repo, branch)         repo.create_file(\"test.txt\", \"TEST!\", \"hi\", branch)         repo.create_pull(\"testing\", \"test\", repo.default_branch, branch) ```"
    },
    {
        "title": "How to get HTML content of README?",
        "body": "Hi,  Github let you return the README in HTML format passing header \"Accept: application/vnd.github.html\".  How can i do it with this library?  Thanks."
    },
    {
        "title": "when running workflow.create_dispatch , the class returns \"False\" without any explanation ",
        "body": "when executing  workflow.create_dispatch with dispatch_inputs parameters, only \"False\" is returned when there are issues with formatting or input names  in Workflow.py , create_dispatch function          status, _, _ = self._requester.requestJson(             \"POST\", f\"{self.url}/dispatches\", input={\"ref\": ref, \"inputs\": inputs}         )         return status == 204  this should at least print the real error code , that would be a lot more informative "
    },
    {
        "title": "How to add branch protection rule on nonexistent branches?",
        "body": "We want to be able to create standardized repositories in my company and we have rules that each repository needs some branch protection rules e.g. on `release/*` set up. How to add branch protection rule on these nonexistent branches (containing asterisk) with this library?"
    },
    {
        "title": "Couldn't create \".github\" directory ",
        "body": "I couldn't create \".github\" directory using PyGithub's \"create_file\" function. Is this a restriction for creating special folders ?? Or is there any other functions to **Create** workflow files "
    },
    {
        "title": "GPG keys list method not available",
        "body": "The GPGKEYS list is available in Go library  but it is not available in python library . Is there any other method similar to this which we can use ? "
    },
    {
        "title": "create_repo_from_template doesn't exist in the latest version (1.57)",
        "body": "Hi,  I realized that crete_repo_from_template feature which is merged in #2090 does not exist in v1.57.   In addition, even if it is included in v1.56, its signature is missing in .pyi files.  Thank you for your attention in advance.  "
    },
    {
        "title": "License inconsistency",
        "body": "Is this LGPL or GPL  see https://github.com/PyGithub/PyGithub/blob/master/COPYING  You have a COPYING.LESSER file but in the above one it shows  ![image](https://user-images.githubusercontent.com/12110404/216646101-3295b2f5-be7d-4f90-ab6a-ca10d89f56b9.png)  You will also find it reported as LGPL in a number of repos. If it is Dual or either or, but could do with being a little clearer"
    },
    {
        "title": "implement packages api",
        "body": "I searched quite a bit in the existing issue but did not found anything regarding https://docs.github.com/en/rest/packages yet  would appreciate support for github packages a lot  my use case: delete 5000+ packages"
    },
    {
        "title": "Missing new options for controlling the default commit title on the Repository",
        "body": "Hi,  I was investigating how to implement the new options around default commit messages when merging a pull request:  https://github.blog/changelog/2022-08-23-new-options-for-controlling-the-default-commit-message-when-merging-a-pull-request/   Based on the above this can be implemented via the API using: `squash_merge_commit_title` and `squash_merge_commit_message` as seen on the API: https://docs.github.com/en/rest/repos/repos#update-a-repository  I can't find this being implemented on `PyGithub` but I can see we can modify on the `edit` repo the type of merge: https://github.com/PyGithub/PyGithub/blob/master/github/Repository.py#L1564-L1566  Is this something that people would be interested about?  Thanks,"
    },
    {
        "title": "python 3 updates and flake8 tidyups",
        "body": " - added trailing commas as per python after 3.5, 3.6+ - sorted imports with isort - replaced some strings with newer f-strings  - re-applied black formatting  - confirmed all tests pass  - ran pre-commit hooks"
    },
    {
        "title": "traffic rest api documentation refs are stale",
        "body": "These links https://github.com/search?q=repo%3APyGithub%2FPyGithub+rest+%22repos%23traffic%22&type=code should be updated...  The current documentation link is: https://docs.github.com/en/rest/metrics/traffic?apiVersion=2022-11-28 "
    },
    {
        "title": "Feature request: DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}",
        "body": "Hi  I would like to see a way to use https://docs.github.com/en/rest/teams/teams?apiVersion=2022-11-28#remove-a-repository-from-a-team. i.e. `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.  For instance this could be implemented with the method `update_team_repository` by setting permission `None` for example.  Example code could look like this.  ```python team = org.get_team_by_slug(team_slug) repo = org.get_repo(repo_name) team.update_team_repository(repo, None) print(f\"Successfully removed team {team_slug} from {repo_name}.\") ```  And in using `None` as permission, have update_team_repository send a DELETE request to Github API."
    },
    {
        "title": "The `organization` attribute of github.Repository.Repository can't request teams",
        "body": "Hello. It looks like something is wrong with the credentials of the mentioned attribute.  Here's the reproducing case:  ``` In [32]: from github import Github  In [33]: gh = Github(getpass.getpass(), per_page=100) Password:   In [34]: repo = gh.get_repo(\"ClickHouse/ClickHouse\")  In [35]: repo.organization Out[35]: Organization(login=\"ClickHouse\")  In [36]: repo.organization.get_teams() Out[36]: <github.PaginatedList.PaginatedList at 0x7f7ca69cdf90>  In [37]: list(Out[36]) --------------------------------------------------------------------------- UnknownObjectException                    Traceback (most recent call last) Cell In[37], line 1 ----> 1 list(Out[36])  File /usr/lib/python3.10/site-packages/github/PaginatedList.py:56, in PaginatedListBase.__iter__(self)      54 yield from self.__elements      55 while self._couldGrow(): ---> 56     newElements = self._grow()      57     yield from newElements  File /usr/lib/python3.10/site-packages/github/PaginatedList.py:67, in PaginatedListBase._grow(self)      66 def _grow(self): ---> 67     newElements = self._fetchNextPage()      68     self.__elements += newElements      69     return newElements  File /usr/lib/python3.10/site-packages/github/PaginatedList.py:201, in PaginatedList._fetchNextPage(self)     200 def _fetchNextPage(self): --> 201     headers, data = self.__requester.requestJsonAndCheck(     202         \"GET\", self.__nextUrl, parameters=self.__nextParams, headers=self.__headers     203     )     204     data = data if data else []     206     self.__nextUrl = None  File /usr/lib/python3.10/site-packages/github/Requester.py:353, in Requester.requestJsonAndCheck(self, verb, url, parameters, headers, input)     352 def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None): --> 353     return self.__check(     354         *self.requestJson(     355             verb, url, parameters, headers, input, self.__customConnection(url)     356         )     357     )  File /usr/lib/python3.10/site-packages/github/Requester.py:378, in Requester.__check(self, status, responseHeaders, output)     376 output = self.__structuredFromJson(output)     377 if status >= 400: --> 378     raise self.__createException(status, responseHeaders, output)     379 return responseHeaders, output  UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest\"}  In [38]: org = gh.get_organization(repo.organization.login)  In [39]: teams = list(org.get_teams())  In [40]: teams[1] Out[40]: Team(name=\"****\", id=00000000) ```  The library version is 1.57"
    },
    {
        "title": "Add \"created\" filter for Repository Workflow runs",
        "body": "This `created` filter, which allows filtering for workflow runs created within the given date-time range. For more information on the syntax, see [\"Understanding the search syntax.\"](https://docs.github.com/en/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates) [API Docs here](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).  Example usage:  1. Filtering for workflow runs by created on a repository level (all workflows): ```python g = Github(\"access_token\") g.get_repo(\"PyGithub/PyGithub\").get_workflow_runs(created=\"2022-12-24\") ```  2. Filtering for workflow runs by created for a specific workflow ```python g = Github(\"access_token\") workflow = g.get_repo(\"PyGithub/PyGithub\").get_workflow(\"ci.yml\") workflow.get_runs(created=\"2022-12-24\") ```  FYI - `check.yml` doesn't exist anymore in the repository, the tests should be changed to `ci.yml`."
    },
    {
        "title": "Structural Path analysis running in Pyspa",
        "body": "sc = pyspa.get_spa(target_id = 78, max_stage = 6, a_matrix_file_path ='A_matrix_template.csv', infosheet_file_path='Infosheet_template.csv', thresholds_file_path='Thresholds_template.csv')  Hello, I want to run this code in python which I already did successfully. But I need to make a do loop where I can set the code that can target all target ID one by one and gives the result at once. In this code, I have to run the code for one ID at a time. Please help me in this regard  "
    },
    {
        "title": "SSLEOFERROR on sending the same big asset second time",
        "body": "Hello, it's the same error faced in https://github.com/PyGithub/PyGithub/discussions/2264  Here's the minimal reproducing case:  ``` $ dd if=/dev/zero of=/tmp/asset bs=10M count=10                 10+0 records in 10+0 records out 104857600 bytes (105 MB, 100 MiB) copied, 0,0326497 s, 3,2 GB/s $ cat repro.py  from getpass import getpass from pathlib import Path  from github import Github from github.GithubException import GithubException  gh = Github(getpass(), per_page=100) release = gh.get_repo(\"Felixoid/ClickHouse\").get_release(\"v22.9.2.7-stable\")   def upload_asset(release, path):     try:         release.upload_asset(str(path))     except GithubException as e:         if (             \"message\" in e.data             and e.data[\"message\"] == \"Validation Failed\"             and [                 True                 for err in e.data[\"errors\"]                 if err[\"code\"] == \"already_exists\"  # type: ignore             ]         ):             print(\"exception\")   for i in range(15):     upload_asset(release, Path(\"/tmp/asset\")) $ python repro.py  Password:   Traceback (most recent call last):   File \"/usr/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 703, in urlopen     httplib_response = self._make_request(   File \"/usr/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 398, in _make_request     conn.request(method, url, **httplib_request_kw)   File \"/usr/lib/python3.10/site-packages/urllib3/connection.py\", line 239, in request     super(HTTPConnection, self).request(method, url, body=body, headers=headers)   File \"/usr/lib/python3.10/http/client.py\", line 1282, in request     self._send_request(method, url, body, headers, encode_chunked)   File \"/usr/lib/python3.10/http/client.py\", line 1328, in _send_request     self.endheaders(body, encode_chunked=encode_chunked)   File \"/usr/lib/python3.10/http/client.py\", line 1277, in endheaders     self._send_output(message_body, encode_chunked=encode_chunked)   File \"/usr/lib/python3.10/http/client.py\", line 1076, in _send_output     self.send(chunk)   File \"/usr/lib/python3.10/http/client.py\", line 998, in send     self.sock.sendall(data)   File \"/usr/lib/python3.10/ssl.py\", line 1237, in sendall     v = self.send(byte_view[count:])   File \"/usr/lib/python3.10/ssl.py\", line 1206, in send     return self._sslobj.write(data) ssl.SSLEOFError: EOF occurred in violation of protocol (_ssl.c:2396)  During handling of the above exception, another exception occurred:  Traceback (most recent call last):   File \"/usr/lib/python3.10/site-packages/requests/adapters.py\", line 489, in send     resp = conn.urlopen(   File \"/usr/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 787, in urlopen     retries = retries.increment(   File \"/usr/lib/python3.10/site-packages/urllib3/util/retry.py\", line 592, in increment     raise MaxRetryError(_pool, url, error or ResponseError(cause)) urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='uploads.github.com', port=443): Max retries exceeded with url: /repos/Felixoid/ClickHouse/releases/86328273/assets?label=&name=asset (Caused by SSLError(SSLEOFError(8, 'EOF occurred in violation of protocol (_ssl.c:2396)')))  During handling of the above exception, another exception occurred:  Traceback (most recent call last):   File \"/home/felixoid/Space/Felixoid/github/ClickHouse/clickhouse-repos-manager/repro.py\", line 24, in <module>     upload_asset(release, Path(\"/tmp/asset\"))   File \"/home/felixoid/Space/Felixoid/github/ClickHouse/clickhouse-repos-manager/repro.py\", line 13, in upload_asset     release.upload_asset(str(path))   File \"/usr/lib/python3.10/site-packages/github/GitRelease.py\", line 256, in upload_asset     resp_headers, data = self._requester.requestBlobAndCheck(   File \"/usr/lib/python3.10/site-packages/github/Requester.py\", line 370, in requestBlobAndCheck     *self.requestBlob(   File \"/usr/lib/python3.10/site-packages/github/Requester.py\", line 490, in requestBlob     return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)   File \"/usr/lib/python3.10/site-packages/github/Requester.py\", line 528, in __requestEncode     status, responseHeaders, output = self.__requestRaw(   File \"/usr/lib/python3.10/site-packages/github/Requester.py\", line 555, in __requestRaw     response = cnx.getresponse()   File \"/usr/lib/python3.10/site-packages/github/Requester.py\", line 127, in getresponse     r = verb(   File \"/usr/lib/python3.10/site-packages/requests/sessions.py\", line 635, in post     return self.request(\"POST\", url, data=data, json=json, **kwargs)   File \"/usr/lib/python3.10/site-packages/requests/sessions.py\", line 587, in request     resp = self.send(prep, **send_kwargs)   File \"/usr/lib/python3.10/site-packages/requests/sessions.py\", line 701, in send     r = adapter.send(request, **kwargs)   File \"/usr/lib/python3.10/site-packages/requests/adapters.py\", line 563, in send     raise SSLError(e, request=request) requests.exceptions.SSLError: HTTPSConnectionPool(host='uploads.github.com', port=443): Max retries exceeded with url: /repos/Felixoid/ClickHouse/releases/86328273/assets?label=&name=asset (Caused by SSLError(SSLEOFError(8, 'EOF occurred in violation of protocol (_ssl.c:2396)'))) $ pacman -Q python-pygithub  python-pygithub 1.57-1 ```  Here's the release I use https://github.com/Felixoid/ClickHouse/releases/tag/v22.9.2.7-stable  ### upd 1 It looks like the asset size affects the result. 10M does the same, but 1M actually works"
    },
    {
        "title": "Generate release notes content for a release",
        "body": "Add support to generate release notes content for a release  https://docs.github.com/en/rest/releases/releases#generate-release-notes-content-for-a-release"
    },
    {
        "title": "Feat: Add missing branch protection fields incl. lock_branch",
        "body": "Fixes #2373  Add new BranchProtection options listed here: https://developer.github.com/v3/repos/branches/  `required_linear_history` `allow_force_pushes` `allow_deletions` `lock_branch`  Replica of #1723 and #2376 but also adds `lock_branch`. "
    },
    {
        "title": "Support for Python 3.11",
        "body": "Importing the `github` module gives an error; the error comes from `deprecated` -> `wrapt`, which uses `inspect.formatargspec`, which was deprecated since Python 3.5 and removed in Python 3.11. ```     import github env/lib64/python3.11/site-packages/github/__init__.py:56: in <module>     from github.MainClass import Github, GithubIntegration env/lib64/python3.11/site-packages/github/MainClass.py:59: in <module>     import github.Event env/lib64/python3.11/site-packages/github/Event.py:32: in <module>     import github.NamedUser env/lib64/python3.11/site-packages/github/NamedUser.py:44: in <module>     import github.Organization env/lib64/python3.11/site-packages/github/Organization.py:50: in <module>     import github.Repository env/lib64/python3.11/site-packages/github/Repository.py:93: in <module>     from deprecated import deprecated env/lib64/python3.11/site-packages/deprecated/__init__.py:15: in <module>     from deprecated.classic import deprecated env/lib64/python3.11/site-packages/deprecated/classic.py:15: in <module>     import wrapt env/lib64/python3.11/site-packages/wrapt/__init__.py:10: in <module>     from .decorators import (adapter_factory, AdapterFactory, decorator, env/lib64/python3.11/site-packages/wrapt/decorators.py:34: in <module>     from inspect import ismethod, isclass, formatargspec E   ImportError: cannot import name 'formatargspec' from 'inspect' (/usr/lib64/python3.11/inspect.py) ```"
    },
    {
        "title": "github.BranchProtection.BranchProtection missing 3 attributes",
        "body": "This is duplicate of issue [1716](https://github.com/PyGithub/PyGithub/issues/1716) (closed by StaleBot).  GitHub api provides to do the following:      required_linear_history: true,     allow_force_pushes: true,     allow_deletions: true  https://docs.github.com/en/rest/branches/branch-protection?apiVersion=2022-11-28#update-branch-protection  The functions related to this 3 branch protection rules are not added in the class mentioned in the title.  PR #1723 was closed by the author, but this feature is still missing. "
    },
    {
        "title": "List repositories accessible to the app installation returns \"Resource not accessible by integration\"",
        "body": "The full error: `github.GithubException.GithubException: 403 {\"message\": \"Resource not accessible by integration\", \"documentation_url\": \"https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user\"}`"
    },
    {
        "title": "[Feature Request] Add support for X-GitHub-Api-Version HTTP header",
        "body": "GitHub just announced changes in how GitHub REST API versioning is going to work [1], a new `X-GitHub-Api-Version` HTTP header was announced to manage a calendar-based version.  Would be nice that PyGithub library can manage this new header.  [1] https://github.blog/2022-11-28-to-infinity-and-beyond-enabling-the-future-of-githubs-rest-api-with-api-versioning/"
    },
    {
        "title": "update docs for create_issue",
        "body": "Docs on repository.create_issue don't reflect the possibility to list labels as strings. This option is added to https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.create_issue in this PR. For more details, see #2355  Edit: I can't find the connection between the pipeline failing and the PR. How can I fix the pipeline?"
    },
    {
        "title": "Bug Report, get_workflows relies on filename instead of workflow name",
        "body": "Bug Report   When a workflow is created in the `.github/workflows` directory with a filename, this permanently the name by which the [get_workflow](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_workflow) api refers to it.  If the filename is changed and pushed upstream (i.e. changing the extension from yaml to yml) the get_workflow will not find the new filename, it will continue to look for \"my_original_workflow.yaml\".  The most frustrating part of this bug is that it's looking for the \"filename\" not the \"name\".  both the new filename as well as the workflow name (which can be retrieved from the [get_workflows](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_workflows) api ) result in a 404 not found error.  I think the api should query the workflow `name` as it suggests that it does in the documentation  Steps to reproduce:  Create a function, main.py ``` import os from github import Github  def list_workflows(gh_pat=None):     token = os.getenv(\"MY_GITHUB_TOKEN\", default=gh_pat)     g = Github(token)     repo_name = \"Organization/my_repo\"     workflows = g.get_repo(repo_name).get_workflows()     workflow_list = []     for workflow in workflows:         workflow_list.append(workflow.name)     return workflow_list  print(list_workflows()) ```  Call it and get the expected result ``` ['main', 'my_other_workflow'] ```  Create a function, gatherer.py ``` import os from github import Github  def gather(statuses=[\"completed\"], conclusions=[\"success\", \"failure\"]):     token = os.getenv(\"MY_GITHUB_TOKEN\")     g = Github(token)     #wf_name = \"my_other_workflow.yaml\"     wf_name = \"my_other_workflow\"     repo_name = \"Organization/my_repo\"     logs = []      runs = [         r         for r in g.get_repo(repo_name).get_workflow(wf_name).get_runs()         if r.status in statuses     ]     return runs  print(gather()) ```  Call it and get a 404 ``` Traceback (most recent call last):   File \"/Users/me/gatherer.py\", line 19, in <module>     print(gather())   File \"/Users/me/gatherer.py\", line 14, in gather     for r in g.get_repo(repo_name).get_workflow(wf_name).get_runs()   File \"/Users/me/.conda/lib/python3.9/site-packages/github/Repository.py\", line 3032, in get_workflow     headers, data = self._requester.requestJsonAndCheck(   File \"/Users/me/.conda/lib/python3.9/site-packages/github/Requester.py\", line 317, in requestJsonAndCheck     return self.__check(   File \"/Users/me/.conda/lib/python3.9/site-packages/github/Requester.py\", line 342, in __check     raise self.__createException(status, responseHeaders, output) github.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest/reference/actions#get-a-workflow\"} ```  "
    },
    {
        "title": "Feature request. Support require_last_push_approval",
        "body": "require_last_push_approval  is part of branch protection under pull requests. Its currently not supported by PyGithub. "
    },
    {
        "title": "Get an organization installation",
        "body": "[MainClass.GithubIntegration.get_installation()](https://github.com/PyGithub/PyGithub/blob/f1faf941ecac3619fb410904727ced182b4e4fe1/github/MainClass.py#L862) requires a `repo` and an `owner`, but [the GitHub API has an endpoint where we can just pass the `org`](https://docs.github.com/en/rest/apps/apps#get-an-organization-installation-for-the-authenticated-app). The response schemas are the same.  This would be useful when creating an org wide app where a mention of an arbitrary repo installation doesn't make much sense.   I can create a PR if this seems something worth adding. "
    },
    {
        "title": "Add enable() method for workflows",
        "body": "### The Problem  Workflows disabled due to the 60-day-long period of inactivity (`state: disabled_inactivity`) need to be re-enabled before using `create_dispatch()`.  ### The Solution  Implement the `enable()` that hits the `/enable` endpoint of API with a PUT request. I have not added tests due to lack of knowledge about them, sorry.  Cheers from [YunoHost-Apps](https://github.com/YunoHost-Apps) project, that has a tad-too-many repositories to be managed one-by-one. \ud83d\ude42 "
    },
    {
        "title": "Update docs on repository.create_issue function",
        "body": "Source: https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.create_issue  The docs specify that the function receives a list of `github.Label.Label`, but the code also allows passing in a list of strings (a.k.a. the label names).  https://github.com/PyGithub/PyGithub/blob/7902351d4fa501dc108dbf3724e93831d922f582/github/Repository.py#L1257-L1261  We should update the docs to reflect that, as it allows the user to skip fetching the issue labels via `repository.get_label` and save some API calls."
    },
    {
        "title": "get_contents has no large file support",
        "body": "According to the github spec if a file is larger than 1MB, only raw types are supported. This causes the get_contents to throw an assertion error because the encoding is \"none\".  https://docs.github.com/en/rest/repos/contents#get-repository-content  The get_contents method should support this case and properly return decoded_content.  Possibly related to #1059"
    },
    {
        "title": "get_contents raises an obscure exception when asking for contents of something which is a directory",
        "body": "``` \u2299  venv/bin/python -c 'from github import Github; print(Github().get_repo(\"json-schema-org/JSON-Schema-Test-Suite\").get_contents(\"tests/\"))' Traceback (most recent call last):   File \"<string>\", line 1, in <module>   File \"/Users/julian/Development/bowtie/venv/lib/python3.11/site-packages/github/Repository.py\", line 1854, in get_contents     return github.ContentFile.ContentFile(            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   File \"/Users/julian/Development/bowtie/venv/lib/python3.11/site-packages/github/GithubObject.py\", line 283, in __init__     super().__init__(requester, headers, attributes, completed)   File \"/Users/julian/Development/bowtie/venv/lib/python3.11/site-packages/github/GithubObject.py\", line 84, in __init__     self._storeAndUseAttributes(headers, attributes)   File \"/Users/julian/Development/bowtie/venv/lib/python3.11/site-packages/github/GithubObject.py\", line 96, in _storeAndUseAttributes     self._useAttributes(attributes)   File \"/Users/julian/Development/bowtie/venv/lib/python3.11/site-packages/github/ContentFile.py\", line 191, in _useAttributes     if \"content\" in attributes:  # pragma no branch        ^^^^^^^^^^^^^^^^^^^^^^^ TypeError: argument of type 'NoneType' is not iterable ```  This is similar to #1059 (which was autoclosed for staleness EDIT: no seems that had a PR merged, but the issue persists.)."
    },
    {
        "title": "Add author_association field to Issue",
        "body": "Currently, [Issue](https://github.com/PyGithub/PyGithub/blob/v1.56/github/Issue.py) is missing the `author_association` field.  This field can be seen in the example response and the response schema [here](https://docs.github.com/en/rest/issues/issues).  Field was added using the [script](https://github.com/PyGithub/PyGithub/blob/master/CONTRIBUTING.md#adding-missing-attributes-for-a-githubobject)."
    },
    {
        "title": "Add merged_at and url fields to IssuePullRequest",
        "body": "Currently, [IssuePullRequest](https://github.com/PyGithub/PyGithub/blob/v1.56/github/IssuePullRequest.py) is missing the following fields:  * merged_at * url  The `url` can be seen in the example response and the response schema [here](https://docs.github.com/en/rest/issues/issues), whereas the `merged_at` is only present in the response schema.  Both fields where added according to other fields within the library of the same type. "
    },
    {
        "title": "break out get_installation into user and repo",
        "body": "I accidentally deleted the repo I had forked thinking [my last PR](https://github.com/PyGithub/PyGithub/pull/2307) had been merged, but it had not been. These are the same changes as last time.  Purpose from the old PR: > GitHub app installations can be either repo or user installed, and the API offers endpoints for both. I added two methods to specify what type of installation you are getting. The original method now calls get_repo_installation for backward-compatibility."
    },
    {
        "title": "Missing head_sha parameter in Workflow.get_runs()",
        "body": "Thank you for this great project!  I found that the `get_runs` function of `Workflow` has missing parameters. https://github.com/PyGithub/PyGithub/blob/master/github/Workflow.py#L134  Specifically, I needed the `head_sha` (string, and maybe `GithubObject.Commit`?) query parameter as documented at https://docs.github.com/en/rest/actions/workflow-runs#list-workflow-runs-for-a-repository .  However, also note that the `created` (string representing datetime range), `exclude_pull_requests` (boolean) and `check_suite` (integer or `GithubObject.CheckSuite`) are missing.  Is there a workaround possible such that I can access the underlying client?"
    },
    {
        "title": "Adding github topics to all repositories in an organization ",
        "body": "Perhaps this has been covered but I would like to know if its possible to add topics with the use of PyGithub to all repos in an organization. I am unable to find much documentation around this, any help in pointing me to the right direction would be greatly appreciated.  "
    },
    {
        "title": "Update jinja2 requirement from <3.1 to <3.2",
        "body": "Updates the requirements on [jinja2](https://github.com/pallets/jinja) to permit the latest version.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/jinja/releases\">jinja2's releases</a>.</em></p>\n<blockquote>\n<h2>3.1.2</h2>\n<p>This is a fix release for the <a href=\"https://github.com/pallets/jinja/releases/tag/3.1.0\">3.1.0</a> feature release.</p>\n<ul>\n<li>Changes: <a href=\"https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-2\">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-2</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/jinja/milestone/13?closed=1\">https://github.com/pallets/jinja/milestone/13?closed=1</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/jinja/blob/main/CHANGES.rst\">jinja2's changelog</a>.</em></p>\n<blockquote>\n<h2>Version 3.1.2</h2>\n<p>Released 2022-04-28</p>\n<ul>\n<li>Add parameters to <code>Environment.overlay</code> to match <code>__init__</code>.\n:issue:<code>1645</code></li>\n<li>Handle race condition in <code>FileSystemBytecodeCache</code>. :issue:<code>1654</code></li>\n</ul>\n<h2>Version 3.1.1</h2>\n<p>Released 2022-03-25</p>\n<ul>\n<li>The template filename on Windows uses the primary path separator.\n:issue:<code>1637</code></li>\n</ul>\n<h2>Version 3.1.0</h2>\n<p>Released 2022-03-24</p>\n<ul>\n<li>\n<p>Drop support for Python 3.6. :pr:<code>1534</code></p>\n</li>\n<li>\n<p>Remove previously deprecated code. :pr:<code>1544</code></p>\n<ul>\n<li><code>WithExtension</code> and <code>AutoEscapeExtension</code> are built-in now.</li>\n<li><code>contextfilter</code> and <code>contextfunction</code> are replaced by\n<code>pass_context</code>. <code>evalcontextfilter</code> and\n<code>evalcontextfunction</code> are replaced by <code>pass_eval_context</code>.\n<code>environmentfilter</code> and <code>environmentfunction</code> are replaced\nby <code>pass_environment</code>.</li>\n<li><code>Markup</code> and <code>escape</code> should be imported from MarkupSafe.</li>\n<li>Compiled templates from very old Jinja versions may need to be\nrecompiled.</li>\n<li>Legacy resolve mode for <code>Context</code> subclasses is no longer\nsupported. Override <code>resolve_or_missing</code> instead of\n<code>resolve</code>.</li>\n<li><code>unicode_urlencode</code> is renamed to <code>url_quote</code>.</li>\n</ul>\n</li>\n<li>\n<p>Add support for native types in macros. :issue:<code>1510</code></p>\n</li>\n<li>\n<p>The <code>{% trans %}</code> tag can use <code>pgettext</code> and <code>npgettext</code> by\npassing a context string as the first token in the tag, like\n<code>{% trans &quot;title&quot; %}</code>. :issue:<code>1430</code></p>\n</li>\n<li>\n<p>Update valid identifier characters from Python 3.6 to 3.7.\n:pr:<code>1571</code></p>\n</li>\n<li>\n<p>Filters and tests decorated with <code>@async_variant</code> are pickleable.\n:pr:<code>1612</code></p>\n</li>\n<li>\n<p>Add <code>items</code> filter. :issue:<code>1561</code></p>\n</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pallets/jinja/commit/b08cd4bc64bb980df86ed2876978ae5735572280\"><code>b08cd4b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pallets/jinja/issues/1660\">#1660</a> from pallets/release-3.1.2</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/1e68ba86177504bb6404288610608b855eab93fa\"><code>1e68ba8</code></a> release version 3.1.2</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/8efee35092404ba67ede8316566be4f430e7b61d\"><code>8efee35</code></a> pre-commit updates latest release branch</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/a24df26d54fa2ccbe9bdaa0bb9419075a00e2699\"><code>a24df26</code></a> ignore new mypy finding</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/9faee281ea75694e28c33e2878879b322359d411\"><code>9faee28</code></a> update requirements</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/b802b5a6ad9deea082c16d9adb6417eda1a184d8\"><code>b802b5a</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pallets/jinja/issues/1655\">#1655</a> from dvitek/dvitek/issue1654</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/746bb95780c17687b27b6d1bf4df1216f0da972c\"><code>746bb95</code></a> Fix race conditions in FileSystemBytecodeCache</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/466a200ea40642b674db77588d13889abbad55f5\"><code>466a200</code></a> update requirements</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/990602f719b4086540287e95f601baefd830d790\"><code>990602f</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pallets/jinja/issues/1647\">#1647</a> from Tom-Brouwer/202204/add-missing-overlay-options</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/5d3d2414710c1439105d84efc58e4aba8e453cb3\"><code>5d3d241</code></a> fix flake8-bugbear finding</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pallets/jinja/compare/2.0rc1...3.1.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.\n"
    },
    {
        "title": "[Feature Request] Allow setting default value for lazy for all API calls",
        "body": "As I'm already familiar with lazy objects & workflows, I would like it to have `lazy==True` to be the default. But because this may be not the best for everyone, I propose adding a default lazy argument to the initial `Github` class constructor which becomes the default for every method called by it. If I gain some time, I will look into implementing it myself. However if someone else is faster to implement it, feel free to implement & submit it yourself.  This may be implemented by adding a variable to `Github` which holds the global default, can be set by using the constructor and defaults to `False` (to keep the current behavior the default). Then every method supporting lazy behavior may either look up this global default by itself or a decorator is implemented which replaces the lazy parameter by itself. The default for the method's argument should be set to `None`. Then the following comparison code can be used to resolve the value to use: ```python lazy_global_default if lazy_method_arg is None else lazy_method_arg ```  (This issue serves as a reminder for myself.)  PS: This library looks really good & is easy to use, thanks for the work.  "
    },
    {
        "title": "Add ability to filter collaborators of a repository by permissions",
        "body": "E.g., I want to be able to do this:  ```python gh = Github(TOKEN) repo = gh.get_repo(\"some/repo\") for user in repo.get_collaborators(permission='admin'):     # something ```  This is currently not possible."
    },
    {
        "title": "Feature request: Signing commits",
        "body": "Currently the [github.Repository.Repository.create_git_commit](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.create_git_commit) method does not support signing commits, though it is [supported](https://docs.github.com/en/rest/git/commits#create-a-commit--parameters) (GPG) in the GitHub API."
    },
    {
        "title": "The documentation for get_organization may be incorrect.",
        "body": "The documentation on get_organization[ here ](https://pygithub.readthedocs.io/en/latest/github.html#github.MainClass.Github.get_organization) accepts a `login` parameter. I think it should be `organization_name` instead. "
    },
    {
        "title": "Add selected repository to an organisation secret",
        "body": "Add functionality to Add a selected repository to an organization's secret as mentioned in docs https://docs.github.com/en/rest/actions/secrets#add-selected-repository-to-an-organization-secret Usage: `g.get_organization(\"test\").add_repository_to_organization_secret(\"secret-name\", repository)`  also, it will close https://github.com/PyGithub/PyGithub/issues/2198"
    },
    {
        "title": "getting AssertionError: unsupported encoding: none only on aws",
        "body": "When I try to get the decoded_content on my windows computer it runs fine, and it used to run fine on the server but ever since I updated it I get this error when calling decoded_content on my aws server: ``` Traceback (most recent call last):   File \"/home/ubuntu/.cache/pypoetry/virtualenvs/vct-predictions-bot-sfowNqXl-py3.8/lib/python3.8/site-packages/discord/client.py\", line 382, in _run_event     await coro(*args, **kwargs)   File \"vctpb/main.py\", line 214, in on_ready     save_savedata_from_github()   File \"/home/ubuntu/VCT-Predictions-Bot/vctpb/vctpb/savedata.py\", line 163, in save_savedata_from_github     f.write(content.decoded_content)   File \"/home/ubuntu/.cache/pypoetry/virtualenvs/vct-predictions-bot-sfowNqXl-py3.8/lib/python3.8/site-packages/github/ContentFile.py\", line 59, in decoded_content     assert self.encoding == \"base64\", f\"unsupported encoding: {self.encoding}\" AssertionError: unsupported encoding: none ```"
    },
    {
        "title": "List of repositories of an organization with topics information.",
        "body": "Hello,   According to the Github documentation (https://docs.github.com/en/rest/repos/repos),  when you execute GET of an organization's repositories it returns a list of objects. Each object is a repository and has several fields with information. One of them is the topics:  {     \"id\": 1296269,         ...     \"full_name\": \"octocat/Hello-World\",         ...     \"is_template\": false,     **\"topics\":** [       \"octocat\",       \"atom\",       \"electron\",       \"api\"     ],     \"has_issues\": true,         ...     \"template_repository\": null }  However, this information is not given when using this API, but forces you to make a get_topics() call, so for large volumes of repositories, it increases the number of calls to Github.  Is there any solution for this, could you add this field?  Greetings and thanks in advance "
    },
    {
        "title": "get asset api URL from browser download URL ",
        "body": "is there a way to get the asset api URL from the browser download URL?   e.g one of my releases hase the following asset url:   'https://github.com/owner/repo/releases/download/v4.20.5/asset-v4.20.5.tar.gz'  I've managed to know (only cause it's the latest release so i could use \"g.get_repo(repository).get_latest_release().get_assets()[0]\") the API url: 'https://api.github.com/repos/owner/repo/releases/assets/76676344'  so 76676344 is the asset ID.  how can i get this string for any asset from the browser URL?  thank you"
    },
    {
        "title": "html_url is missing from Milestone",
        "body": "html_url is available in *raw_data*, it would be convenient if it could be published as a property of the Milestone class as well, as it is already the case e.g. for Release.  Thank you"
    },
    {
        "title": "SSL Issue with Python 3.10.x",
        "body": "I seem to be getting the below error when using PyGithub with Python 3.10.x (same error on Win 10 and Debian Linux Buster)  I tried setting the proxies to \"\"/None using one of the contributors yet to be merged code but that did not help either.  Note: it works fine if i switch to Python 3.9 or lower ``` Caused by SSLError(SSLError(1, '[SSL: WRONG_SIGNATURE_TYPE] wrong signature type (_ssl.c:997)' ```"
    },
    {
        "title": "Feat Request : add support for required_conversation_resolution in edit branch protection rules",
        "body": "the field required_conversation_resolution <bool> is supported by the REST API  (see https://docs.github.com/en/rest/branches/branch-protection#update-status-check-protection)   please add this property for the branch.edit_protection() method   "
    },
    {
        "title": "A certain number in the search_code()",
        "body": "When requested ```python g = github.Github(\"token\") for i in g.search_code(\"language:html\").:     print(i.html_url) ``` I want to be given 10 PaginatedList instances as a result. How can I do this? During normal processing, I get the error `github.Github Exception.RateLimitExceededException: 403`"
    },
    {
        "title": "NamedUser.get_starred() does not do expected job",
        "body": "Hello,  the following code : ``` from github import Github client = Github(my_key) ugs = ogc.get_user('nymtech').get_starred() print('nb_get_starred =',ugs.totalCount) for s in ugs : print(type(s)) print('that\\'s all') ```  gives the answer  ``` nb_get_starred = 0 that's all ```  while the url `https://api.github.com/users/nym/starred` gives a very long page beginning with ``` [   {     \"id\": 231103153,     \"node_id\": \"MDEwOlJlcG9zaXRvcnkyMzExMDMxNTM=\",     \"name\": \"Delta-X-3D-Printed-Parts\",     \"full_name\": \"deltaxrobot/Delta-X-3D-Printed-Parts\",     \"private\": false,     \"owner\": {       \"login\": \"deltaxrobot\",       \"id\": 59392400,       \"node_id\": \"MDQ6VXNlcjU5MzkyNDAw\",       \"avatar_url\": \"https://avatars.githubusercontent.com/u/59392400?v=4\",       \"gravatar_id\": \"\",       \"url\": \"https://api.github.com/users/deltaxrobot\",       \"html_url\": \"https://github.com/deltaxrobot\",       \"followers_url\": \"https://api.github.com/users/deltaxrobot/followers\",       \"following_url\": \"https://api.github.com/users/deltaxrobot/following{/other_user}\",       \"gists_url\": \"https://api.github.com/users/deltaxrobot/gists{/gist_id}\",       \"starred_url\": \"https://api.github.com/users/deltaxrobot/starred{/owner}{/repo}\",       \"subscriptions_url\": \"https://api.github.com/users/deltaxrobot/subscriptions\",       \"organizations_url\": \"https://api.github.com/users/deltaxrobot/orgs\",       \"repos_url\": \"https://api.github.com/users/deltaxrobot/repos\",       \"events_url\": \"https://api.github.com/users/deltaxrobot/events{/privacy}\",       \"received_events_url\": \"https://api.github.com/users/deltaxrobot/received_events\",       \"type\": \"User\",       \"site_admin\": false     },  and so on... ```"
    },
    {
        "title": "fail to explore some very simple repositories like near/near-docusaurus-styles",
        "body": "Trying to execute those lines :  ``` from github import Github  gc = Github() repos = gc.get_user(login='near').get_repos() repo = repos[65] print(repo) open_pulls = repo.get_pulls(state='open') print('open_pulls OK') stats_commit_activity = repo.get_stats_commit_activity() print('stats_commit_activity OK') ``` **The display is  :**   ``` Repository(full_name=\"near/near-docusaurus-styles\") open_pulls OK ```  And then, frozen screen, during a lot of time, (15 mn at least ...).  If I'm patient enough, I obtain finally an answer talking about Exception and  recursivity..."
    },
    {
        "title": "Organisation.pyi is missing delete_branch_on_merge argument",
        "body": "This causes type checkers to fail:  eg: ```python         self._repo = self._org.create_repo(             name=self.repo_name,             team_id=self._project_team.id,             has_wiki=False,             has_projects=False,             allow_merge_commit=False,             allow_rebase_merge=False,             delete_branch_on_merge=True,         ) ```          ``` error: No parameter named \"delete_branch_on_merge\"  ```  pygithub 1.55"
    },
    {
        "title": "Can't get public key for org",
        "body": "Getting `AttributeError: 'Organization' object has no attribute 'get_public_key'` when running ```python g = Github(token) org = g.get_organization(org_name) public_key = org.get_public_key() ``` although it should be working if I am reading the docs correctly https://pygithub.readthedocs.io/en/latest/github_objects/Organization.html#github.Organization.Organization.get_public_key ? "
    },
    {
        "title": "Import path update in Introduction",
        "body": "The import statement in the Introduction throws an error for me with Python 3.10.6 and PyGithub 1.55; qualifying with `MainClass` resolved the issue."
    },
    {
        "title": "Get events by date for a user ",
        "body": "I'm trying to use Github(<token>).get_user(<username>).get_events(). I get events that date back a week and I'm interested in fetching events that occurred at some point in the last year. Is there a way to add dates and achieve this using the API? "
    },
    {
        "title": "get audit log",
        "body": "This allows pulling audit logs for an organization "
    },
    {
        "title": "Support for Dependabot secrets",
        "body": "https://docs.github.com/en/rest/dependabot/secrets  The Github API now supports working with Dependabot secrets. It would be awesome if pygithub supported these features"
    },
    {
        "title": "Support GraphQL Repository Discussions",
        "body": "Is there a plan to support repository discussions? So not teams but repositories.  Example: https://docs.github.com/en/graphql/guides/using-the-graphql-api-for-discussions"
    },
    {
        "title": "Timezone in datetime objects is ignored in querries.",
        "body": "When using Repository.get_commits() with parameters since and until, both of those are formatted with  ``` .strftime(\"%Y-%m-%dT%H:%M:%SZ\") ``` Which leads to timezone unaware querries. Thus, when making request with non local machine, you may end up with unexpected results, as GH may use different timezone than you though will be used, Also, this causes code to behave differently on testing machine and on final machine.  [Solution would be to use .isoformat() instead, as it applies ISO8601 formatting which is (AFAIK) fully supported by GH API.](https://docs.github.com/en/rest/overview/resources-in-the-rest-api#explicitly-providing-an-iso-8601-timestamp-with-timezone-information).  I haven't found any notice in documentation about how to solve this problem, thus as a workaround I have crafted custom datetime class, which always returns `isoformat()` from `strfrime()`, for myself to cure problem for now."
    },
    {
        "title": "GithubException 422 when try to update a file in the Github repository.",
        "body": "Hi!, I get the follow error message when try to update a file in the repository:  github.GithubException.GithubException: 422 {\"message\": \"Invalid request.\\n\\n\\\"sha\\\" wasn't supplied.\", \"documentation_url\": \"https://docs.github.com/rest/reference/repos#create-or-update-file-contents\"}. I attach a screenshot of the code ![Immagine 2022-07-27 100640](https://user-images.githubusercontent.com/79039686/181195772-bd1c7185-f831-40c6-b52d-0fe5bd246a9a.png) ."
    },
    {
        "title": "`get_readme().path()` does not return the path of the actual readme when using a symbolic link",
        "body": "This issue is raised upstream from athul/waka-readme#83. Please note that reading contents from symbolic links using `get_readme()` works just fine. It's the path that's the issue (like when you want to get the path and update the readme.)  ### Current Workaround Use `get_contents(path)` to reference to the actual readme file.  ### Current Behavior `get_readme().path()` returns `\"README.md\"` instead of the actual readme location.  ### Expected Result `get_readme().path()` returns the location of the actual readme location.  "
    },
    {
        "title": "add parent team id when calling create team function fix black precom\u2026",
        "body": "1. create team with `parent team id`   * Based on github [official document](https://docs.github.com/en/rest/teams/teams#create-a-team) , creating team with a parent team id is supported but `PyGithub` doesn't support it yet. So I add this feature on  existing function named `create_team`.   2. solve `pre-commit` dependency error  * when run `pre-commit`, there are dependency issue on https://github.com/psf/black@20.8b1. `psf/black` has import issue with `click`. You can check the issue on this [issue page](https://github.com/psf/black/issues/2976)"
    },
    {
        "title": "Add name attribute for WorkflowRun",
        "body": "I've run:  ``` for run in repo.get_workflow_runs():     print(run) ```  but I don't see a `name` attribute in [docs page](https://pygithub.readthedocs.io/en/latest/github_objects/WorkflowRun.html).  It's part of the response as per [GitHub API docs](https://docs.github.com/en/rest/actions/workflow-runs#list-workflow-runs-for-a-repository).  Related: GH-2270.  ## Workaround  ``` for run in repo.get_workflow_runs(status=\"success\"):     print(run.raw_data['name']) ```"
    },
    {
        "title": "Add the ability to get codeowner errors",
        "body": null
    },
    {
        "title": "Getting AssertionError while creating file in github",
        "body": "![Screenshot 2022-07-10 161322](https://user-images.githubusercontent.com/72690313/178141528-4d124caf-e0c1-46ad-957c-518fa0018fe8.png) "
    },
    {
        "title": "Upload Timeout Error",
        "body": "I am trying to upload mp3 files via PyGitHub, specifically, I am trying to update a file. When I try to run the program, I get the following error ``` Exception has occurred: ConnectionError ('Connection aborted.', TimeoutError('The write operation timed out')) ``` This, however, does not occur when I am on faster internet connections(~15 to 16 Mbs) upload speed. On these faster connections, the files are uploaded successfully. The files are only 5 MB, and I currently only have about 3 Mbs upload speed, so if there is a workaround, it would be greatly appreciated. Maybe increase the timeout or something of that nature. Thanks"
    },
    {
        "title": "Missing parameters from `list` methods",
        "body": "Hey, I think there are some missing parameters from list methods. For example, this API endpoint: `https://docs.github.com/en/rest/actions/workflow-runs#list-workflow-runs` Which is covered by the `Workflow.get_runs()` method, supports the following parameters which are not covered in the method definition: `created, exclude_pull_requests, check_suite_id`, and it also holds for getting workflow runs through `Repository.get_workflow_runs()`. I haven't checked, but it might be that similar params are missing from other places."
    },
    {
        "title": "Add repo edit support for use_squash_pr_title_as_default",
        "body": "fixes: https://github.com/PyGithub/PyGithub/issues/2267  As per  ![Screenshot 2022-07-07 at 12 31 19](https://user-images.githubusercontent.com/20224954/177763593-99716a50-54c6-4e2c-a28c-5f4d15cded98.png) "
    },
    {
        "title": "Add new class Secret",
        "body": "closes #2197 #2198 "
    },
    {
        "title": "use_squash_pr_title_as_default missing from repo edit",
        "body": "Hi there I've noted that the repository API (https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html) seems to be missing certain GitHub apis such as `use_squash_pr_title_as_default`. Is there an easy way to add these?"
    },
    {
        "title": "search_issues() returns error results when the quary str is '>'",
        "body": "**Goal:** get issues in PyGithub whose titles contain >.      I write the code as follows.    **Result:** However, it returns some issues whose titles do not contain >.     **Here is the code:**      ``` from github import Github  g = Github(my_access_token)  quarystring = '>' qualifiers_dict = {'repo': 'PyGithub/PyGithub', 'in': 'title', 'state': 'open'}  results = g.search_issues(quarystring, **qualifiers_dict)  issue_number_list = [] for i in results:     issue_number_list.append(i.number)  print(issue_number_list) ``` **Here is the result:** ``` [503, 580, 983, 739, 852, 1298, 1655, 1750, 1717, 1768, 1309, 1461, 2095, 1448, 2194, 1373, 2126, 2199, 2200, 2202, 2037, 2034, 2069, 2214, 2181, 2225, 1702, 1839, 1477, 2070, 2214, 1917, 2219, 1702, 2204, 2140, 2213, 2220, 2221, 2094, 2222, 1939, 2182, 2228, 2191, 2192, 1718, 2224, 2225, 2181, 2252, 2198, 2253, 1989, 2067, 2237, 2240, 2238, 2239, 2170, 2252, 2178, 2192, 2258, 2259, 2249, 2239, 2260, 2253, 2254, 2261, 2170, 516, 2197, 2262, 423, 1538, 725, 1753, 828, 2196, 2137, 2201, 1676, 2052, 2207, 2190, 2218, 1784, 1976, 2152, 2066, 2161, 1996, 2226, 2189, 2183, 2223, 2227, 2172, 2062, 2193, 2231, 2235, 2243, 2245, 2244, 1791, 1831, 2211, 2248, 1986, 2241, 2256, 2090, 2265] ``` "
    },
    {
        "title": "Add some missing members related attributes to `Organization`",
        "body": "Reopened with more complete tests."
    },
    {
        "title": "How can you retrieve the commit message using the sha.",
        "body": "I've tried the following; ``` commit = org.get_repo(\"my-repo\").get_commit(sha=\"c2144da718afdbc343115e995f585d6d58c7ec6bd\") print(commit.author) print(commit.committer) print(commit.last_modified) ```  Which returns the details of the commit, however,  can not find how to fetch the commit message. I thought it might be;  ``` print(commit.get_comments()) ```  But that doesn't retrieve the commit message.  Does anyone know if it's possible?  thanks in advance! "
    },
    {
        "title": "Failed Invitations List",
        "body": "It looks like while there is a `invitiations()` iterable on the Organization, the associated failed invitations is not available: https://docs.github.com/en/rest/orgs/members#list-failed-organization-invitations  This is important because these failed invites are not automatically resent or deleted -- creating some annoying workflow when you are trying to keep a user actively invited.  "
    },
    {
        "title": "get_stats_contributors raises a max recursion error that takes 35 minutes !",
        "body": "Calling get_stats_contributors on some repositories fails with max recursion error and it takes 35 minutes consistently (many trials) before raising this error.  I'm using the pygithub v1.55 (latest stable version from my knowledge). Below is a step by step instruction to reproduce the error:  ``` from github import Github gh = Github(token) repo_name = \"digit-soft/laravel-i18n\" repo = gh.get_repo(repo_name) response = repo.get_stats_contributors() # takes 35 minutes before raising max recursion error ``` Following are some other repositories that raise this error: `repo_names=[\"Dan0sz/ResourceHints-magento2\", \"kos-v/yii2-jquery-fix-clone\", \"ElaineKoo/weather\"]`  A general hint I've got while inspecting few github repos of these projects is that they are kind of no more maintained. Can you help address this issue as I have script that processes a list of repositories ? So this slows down (if not kills) my work. Or at least, is there any check I can do with the API so that I can anticipate such behavior and consequently skip these repositories?  Thank you so much for your dedication to help us ! "
    },
    {
        "title": "`incomplete_results` is missing as part of the search-results",
        "body": "I noticed this when using PyGitHub and searching about it I saw this comment as well in another issue:  --- Reading the Github API docs about search, I also notice that `incomplete_results` is missing as part of the search-results processin in PyGithub. Probably including that value might also already help out with detecting if search results might be (in)complete.  _Originally posted by @mfonville in https://github.com/PyGithub/PyGithub/issues/824#issuecomment-399421378_  ---  I would love to have this property."
    },
    {
        "title": "repo.get_contents( ) with tag/release parameter",
        "body": "I'm not sure if there is an existing solution and I can't find it, but I would like to load files from an old version of a particular repo. Currently I can only load the latest version of the file from master. So another parameter in repo.get_contents( ) for a version tag would be great.  For example, I would like to load the license file of version v1.53 (https://github.com/PyGithub/PyGithub/blob/v1.53/COPYING) instead of the one from the master (https://github.com/PyGithub/PyGithub/blob/master/COPYING). `repo.get_contents(path=\"COPYING\", tag=\"v1.53\")`"
    },
    {
        "title": "Add support for pulling the latest release",
        "body": "Github allows you to hit `.../releases/latest` to fetch the latest release for a repo. [Example](https://api.github.com/repos/PyGithub/PyGithub/releases/latest). This currently doesn't work in PyGithub because passing in a string will try to hit `.../releases/tags/latest` instead."
    },
    {
        "title": "Edit an existing file of remote repo and create a PR",
        "body": "Here are two things that I want to do:  * Edit existing file. (For eg: update the version in package.json) * Create a PR with that update"
    },
    {
        "title": "Add Workflow.get_artifacts",
        "body": "This is recreating a PR that was closed due to being stale. https://github.com/PyGithub/PyGithub/pull/1985  - create`Workflow.get_artifacts`  "
    },
    {
        "title": "Add https://github.com/packit/ogr to 'Projects using PyGithub'",
        "body": "BTW, the http://devassistant.org says that 'DevAssistant is dead' and [its repo](https://github.com/devassistant/devassistant) has been archived (the last commit is 6 years old) so you might consider removing it from the list - I can do that in this PR if you want."
    },
    {
        "title": "pyjwt<2.4.0 Cryptographic Algorithm CVE",
        "body": "Additional details available in the following link: https://security.snyk.io/vuln/SNYK-PYTHON-PYJWT-2840625"
    },
    {
        "title": "Add / Remove license seats?",
        "body": "Trying to automate seat management with Python...the URL for editing seats is https://github.com/organizations/{orgName}/settings/billing/remove_seats, I've spooled through the Github REST API documentation and found references to viewing plans / used seats / available seats usable via the API, or via PyGithub, but a way to edit the plan is eluding me.    I tried mimicking Chrome's behavior with the Requests library, it seems like it should work, but it doesn't.    Is there any way to do this with PyGithub, or does anyone know of a way to do it programmatically in general?  Thanks!"
    },
    {
        "title": "issue in branch protection rules",
        "body": "Under branch protection rule GitHub provide   **Require conversation resolution before merging** . But I am not able to access it through parameters of    **.edit_protection()**  (a method of branch object), although I can access other branch protection rules. "
    },
    {
        "title": "Examples missing Tag class ",
        "body": "[Tag](https://pygithub.readthedocs.io/en/latest/github_objects/Tag.html?highlight=tag#github.Tag.Tag.name) class is missing section in the [Examples](https://pygithub.readthedocs.io/en/latest/examples.html)  "
    },
    {
        "title": "Document the `update` method",
        "body": "There's a very useful `update` method on objects such as PullRequest that allow re-fetching the state. It would be great if this could be documented!  (I recently used it to implement a wait-for-mergeable loop. Without a call to `update`, I would never know the status had changed, or I would have to recreate the PullRequest object repeatedly.)"
    },
    {
        "title": "Added support for http/s proxies",
        "body": "Added support for proxies servers. Useful for organisations that enforce IP whitelisting to internal IP's (VPN excluded). The Github object has been enhanced to include proxies as a kwarg, the proxies arg expects a dictionary and is a passthrough for the standard requests library way of implementing proxies (https://docs.python-requests.org/en/latest/api/#requests.Session.proxies) i.e.   ``` proxies = {                \"http\"  : http_proxy,                \"https\" : https_proxy,                \"ftp\"   : ftp_proxy             } ```  Usage:   ``` proxy_dict = {                \"https\"  :'http://username:password@proxy.company.com:80',             } g = Github(\"access_token\", proxies=proxy_dict) ```  "
    },
    {
        "title": "[Intermittent Issue] - Getting github.GithubException.UnknownObjectException intermittently but it works for most of the times. ",
        "body": "  I have a script which checks for open PRs and checking some content file in other repository. Script works for most of the times (99.9%) but it fails sometimes with below error details.       There is no issues with the PAT since script works for most of the times.      File \"check_merge_request.py\", line 21, in <module>     result = is_valid_merge_request(gl, jira, repo, os.environ['GITHUB_REPOSITORY'], ref)   File \"merge_request.py\", line 207, in is_valid_merge_request     project = gl.get_repo('<org>/<repo>')   File \"/usr/local/lib/python3.8/dist-packages/github/MainClass.py\", line 330, in get_repo     headers, data = self.__requester.requestJsonAndCheck(\"GET\", url)   File \"/usr/local/lib/python3.8/dist-packages/github/Requester.py\", line 353, in requestJsonAndCheck     return self.__check(   File \"/usr/local/lib/python3.8/dist-packages/github/Requester.py\", line 378, in __check     raise self.__createException(status, responseHeaders, output) github.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest/reference/repos#get-a-repository\"}"
    },
    {
        "title": "Parameters for repository.get_pulls?",
        "body": "I want to get a list of closed prs in order from the ones most recent closed to the oldest ones closed. However, the PyGithub documentation doesn't show what options I have available for the parameters (specifically the variables for \"sorted\"). How might I go about doing this?"
    },
    {
        "title": "Fix stub for creator param in Repository.get_issues()",
        "body": "[The `creator` parameter seems to accept a string](https://github.com/PyGithub/PyGithub/blob/001970d/github/Repository.py#L2495), but the `Repository.pyi` stub does not show this as an allowed type, which results in mypy errors when a string is used.  This PR adds that missing type."
    },
    {
        "title": "Get Repositories for a specific date/month/year or within a range of dates",
        "body": "Hi, Can anyone please help me fetch repositories created on a particular date/month/year or within a range of dates? I have tried the following but it does not give proper results:  1. using \"query\" ` g = Github(TOKEN) repositories = g.search_repositories(query='since:2018') `  2. using \"since\" ` g = Github(TOKEN) r = g.get_repos(since=2021) `  I want to crawl all the public repo for a particular year but since the requests are limited to 1000 thus I am trying to break my search query into smaller queries.  Any help/pointer would be appreciated. Thanks in advance."
    },
    {
        "title": "Search all repositories with a specific query",
        "body": "I'm looking for a way to get all repositories for a particular search. For eg. in the below image, the result is obtained through advanced search options ( stars>499 and language: Python) which results in `9018` repositories.  I've tried to achieve the same through the `search_repositories` method but I'm getting a list of `1020` repositories. I know that `search_repositories` uses the GitHub Search API which provides up to 1,000 results for each search. But is there any workaround to get all the results?  ![image](https://user-images.githubusercontent.com/6857904/166137500-ba56d18b-4028-4876-bdfc-9acc030498cf.png) "
    },
    {
        "title": "Repository.get_workflow_runs() branch-filter will not work",
        "body": "Hi folks,  I hava a problem to get all workflow runs filtered by a branch name:  here is my example code using PyGithub (use REST API): ```python mngt = pipeline_mngt(token, author=author) repo = mngt.get_repo('ee-sandbox-update-stick') runs = repo.get_workflow_runs(branch='develop') for run in runs:     print('+++')     print(run.run_number)     print(run.id)     print(run.status)     print(run.conclusion)     print(run.head_sha) ```  The output is: ``` +++ 13 1828041376 completed success b1f54b4f0a35e0ee5d92a0996f707b988022fe0e +++ 10 1695475854 completed success 7f029451901408ec771108f0a5f0826309475031 +++ 9 1556550806 completed success bbd5adda4c67bebda00caecdc17e96f2fe6fb222 +++ 4 1549799780 completed success fedce555f7012a9b6d5c254ad0f0d4e52dfe339c +++ 2 1364676337 completed success a49eaa62982ae12b34892d14e84f18e2814da98b +++ 1 1364639635 completed success 9b48bd72929de7c3e8a7135062ce16789e49a0f0 ```  When I take a look on the github homepage I get a bit more runs that are at the branch develop! Here is an extract of a special tool from https://github.com/NewestUser/github-workflow-dashboard ![image](https://user-images.githubusercontent.com/79077565/164709020-24d353d4-96d6-4dbf-8269-9d08699f6123.png)  The runs with number 16 and 14 are not in the PyGithub-call.  **Why? Is this a REST API error?** "
    },
    {
        "title": "404 Error when I try to create an Issue",
        "body": "Hello!  Do I need to create OAuth / GitHubApp to post to other repos? With my personal access token is enough? Is the module dead?  Or is an issue related with the module? I mean, I see a lot of issues related!  ```Python import json import re  from github import Github from glom import glom from notion_client import Client  from src.utils import strings  octocat = Github(\"personal_access_token\") notion = Client(auth=\"notion_key\")  svgporn = octocat.get_repo(\"gilbarbara/logos\")  .....  def add_new_logo():     logo, desc, source = get_logo_from_notion()  ....      if not logo_exists:         label = svgporn.get_label(\"request\")         name, link = logo.split(\"-\")          body = f\"\"\"          [{name}]({link})          {desc}          [Logo]({source})          \"\"\"          return svgporn.create_issue(             title=f\"Add {name}\", labels=[label], body=body, assignees=[\"gilbarbara\"]         )  ``` I get this message  ``` github.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest/reference/issues#create-an-issue\"} ```"
    },
    {
        "title": "I'm trying to explore the commits in repositories using PyGithub, but I fail to get the information of the committer and author'slocal time.",
        "body": "I'm trying to explore the commits in repositories using PyGithub, but I fail to get the information of the committer and author'slocal time.  I want to get the local time or the timezone of committer and author through certain repositories' commits. I get the UTC in commits, but i want to explore the committer and author's local time. Can i get it by PyGithub?   I am looking for your reply, thanks!!"
    },
    {
        "title": "Github class' get_oauth_application is missing typing",
        "body": "Hello!  I just noticed that the method `get_oauth_application` (defined [here](https://github.com/PyGithub/PyGithub/blob/master/github/MainClass.py#L765)) is missing a declaration in the [type declaration](https://github.com/PyGithub/PyGithub/blob/master/github/MainClass.pyi#L29).  By the way, [get_app](https://github.com/PyGithub/PyGithub/blob/master/github/MainClass.py#L773) also seems to be missing.  Thank you very much."
    },
    {
        "title": "Demo example fails",
        "body": "Following fails: ```python from github import Github  # Github Enterprise with custom hostname g = Github(     base_url=\"https://github.boschdevcloud.com/api/v3\",     login_or_token=\"MY_TOKEN\", )  u = g.get_user() print(u)  # AuthenticatedUser(login=None)  for repo in u.get_repos():  # socket.gaierror: [Errno 8] nodename nor servname provided, or not known     print(repo.name) ```  I'm not understanding why this fails; but even if I'm doing something wrong error message could be improved."
    },
    {
        "title": "test",
        "body": "test body"
    },
    {
        "title": "Create secret on Repository can also update",
        "body": "According to the github documentation is create and update secret the same endpoint. returning false when updating a secret (status code differently) is misleading. A quick fix would be to allow 201 and 204. Otherwise maybe another method could be there for update and check only on 204."
    },
    {
        "title": "how to approve a wworkflow",
        "body": "hi, i want to approve and run a workflow from a pr. how can i do that?"
    },
    {
        "title": "How to replace a git lfs file",
        "body": "Hi,  I have a function to replace files. Using git tree and git blob. Now we want to use git lfs server. But I don't know how to communicate with git lfs server. Can somebody help me?  ```python def replace_file(self, repo, repo_file_name, source_file_path, ref_name=None, target_path=''):   ''' Replace a file in a git repository.       Parameter:       repo: Repository with type 'Github.get_repo()' or as str.       repo_file_name (old): e.g. test-123-20211021.txt       source_file_path (new): e.g. C:\\\\repository_git\\\\action-package-deploy\\\\download\\\\test-123-20211022.txt       ref_name: Branch name like 'main' or 'develop'. If None = default branch       target_path: e.g. deploy, if '' (default) main folder of repository   '''      # input management   if isinstance(repo, str):       repo = self.get_repo(repo)      # take handle ref   local_ref_name, local_ref_type = self._handle_ref(repo, ref_name)   #print(\"::DEBUG:: ref_name = {}\".format(ref_name))               # DEBUG INFO!   #print(\"::DEBUG:: local_ref_name = {}\".format(local_ref_name))   # DEBUG INFO!   #print(\"::DEBUG:: local_ref_type = {}\".format(local_ref_type))   # DEBUG INFO!      print(\"Replace file '{}' with '{}' at repository '{}' on branch '{}'.\".format(repo_file_name, os.path.basename(source_file_path), repo.name, local_ref_name))      # read for help: https://github.com/PyGithub/PyGithub/issues/1628 and   # https://stackoverflow.com/questions/55786299/delete-multiple-files-from-github-api and   # https://stackoverflow.com/questions/23637961/how-do-i-mark-a-file-as-deleted-in-a-tree-using-the-github-api   # in case of a binary file a workaround is done:   # >>>>>>> https://github.com/PyGithub/PyGithub/issues/863      # set old and new path   if target_path == '':       new_path = os.path.basename(source_file_path)       old_path = repo_file_name   else:       new_path = target_path + '/' + os.path.basename(source_file_path)       old_path = target_path + '/' + repo_file_name      # Step 1: get sha of branch in repo   # API:   # >>> GET /repos/:owner/:REPO/branches/master   #   # >>> $PARENT_SHA = {commit.sha}   repo_sha = self.get_git_ref_sha(repo, local_ref_name)              # Step 2: create a blob with file content and get target sha   # API:   # >>> $TARGET_SHA = {commit.sha}   print(\"Read file '{}' ...\".format(source_file_path))   data = base64.b64encode(open(source_file_path, 'rb').read())      # check file size without using GIT LFS   if os.path.getsize(source_file_path) > 100000000:       raise Exception(\"File size limit reached! File '{}' is larger than 100MB.\".format(source_file_path))      print('Create blob with content ...')   blob = repo.create_git_blob(content=data.decode(\"utf-8\"), encoding='base64')   blob_sha = blob.sha   # post_parameters = {'content': bytes(data), 'encoding': 'utf-8',}   # headers, data = repo._requester.requestJson(\"POST\", f\"{repo.url}/git/blobs\", input=post_parameters)      # Step 3: create a git tree to update the reference   # API:   # >>> POST /repos/:owner/:REPO/git/trees   # >>> {   # >>>   \"base_tree\": $BASE_SHA,   # >>>   \"tree\": [   # >>>       {   # >>>           \"path\": \"path/to/file\",   # >>>           \"mode\": \"100644\",    # >>>           \"type\": \"commit\",   # >>>           \"sha\": $TARGET_SHA   # >>>       }   # >>>   ]   # >>> }   #   # >>> $TREE_SHA = {sha}   base_tree = repo.get_git_tree(repo_sha, recursive = True)   # add new element   elem1 = InputGitTreeElement(path=new_path, mode='100644', type='blob', sha=blob_sha)   # delete old element   elem2 = InputGitTreeElement(path=old_path, mode='100644', type='blob', sha=None)   tree = repo.create_git_tree([elem1, elem2], base_tree)      # Step 4: Commit the tree   # API:   # >>> POST /repos/:owner/:REPO/git/commits   # >>> {   # >>>   \"message\": \"<your commit message>\",   # >>>   \"tree\": $TREE_SHA,   # >>>   \"parents\": [$PARENT_SHA]   # >>> }   msg = \"Update file: '{}' -> '{}'.\".format(repo_file_name, os.path.basename(source_file_path))   parents = [repo.get_git_commit(repo_sha)]   print(\"Create commit with messsage '{}'\".format(msg))   commit = repo.create_git_commit(msg, tree, parents, author = self.author, committer = self.author)      # Step 5: Update branch to point to your new commit   # API:   # >>> PATCH /repos/:owner/:REPO/git/refs/heads/master   # >>> {   # >>>   \"sha\": $COMMIT_SHA   # >>> }   if local_ref_type in ['branch', 'tag-branch', 'default']:       reference = repo.get_git_ref('heads/'+local_ref_name)   else:       reference = repo.get_git_ref('tags/'+local_ref_name)         reference.edit(commit.sha, force=True)      # set return value (or overwrite vaue of first changed repo)                          return commit.sha ```"
    },
    {
        "title": "missing cancel_invitation in Organization class",
        "body": "AttributeError:  'Organization' object has no attribute 'cancel_invitation'"
    },
    {
        "title": "How to Fix this ConnectionError",
        "body": " HTTPSConnectionPool(host='myusername', port=443): Max retries exceeded with url: /api/v3/user/repos (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x0000022944D2F5E0>: Failed to establish a new connection: [Errno 11001] getaddrinfo failed'))"
    },
    {
        "title": "Mark ':' as safe for urlencoding to fix search functionality",
        "body": "Fixes https://github.com/PyGithub/PyGithub/issues/1308"
    },
    {
        "title": "How do I obtain details from a Pull Request?",
        "body": "How do I obtain details from a Pull Request? such as `comments`. ![image](https://user-images.githubusercontent.com/45918704/159167413-1c79d1da-e086-4877-8268-d99b9ba230aa.png) "
    },
    {
        "title": "._rawData vs. .raw_data - Lazy Loading",
        "body": "I am confused about the difference of the ._rawData and the .raw_data attributes of GitubObjects.  While the ._rawData attributes returns stored data instantaneously, the .raw_data attribute tries to redownload the content - even though it is allready in the memory.  Let me provide a minimal example:  ``` fom github import Github  g = Github(GitHubToken, per_page=1000) repo = g.get_repo(\"PyGithub/PyGithub\") issues = repo.get_issues()  #Download Issues to memory issues_list = [] for issue in issues: \tissues_list.append(issue)  ## BLOCK NETWORK ACCESS of PYTHON  issues_list[0]._rawData  # WORKS  issues_list[0].raw_data # ERROR -> Failed to establish a new connection ```"
    },
    {
        "title": "add pull_request_review_id attribute to pullRequestComment",
        "body": "Added missing attributes for a GithubObject using the script referenced in contributing.md"
    },
    {
        "title": "Missing 'pull_request_review_id' attribute in class PullRequestComment",
        "body": "Docs: https://docs.github.com/en/rest/reference/pulls#review-comments"
    },
    {
        "title": "Modify Repository.get_contents() to always return List[github.ContentFile.ContentFile]",
        "body": "Hello!  I made some recent updates to application that uses `Repository.get_contents()` and ran into some typing issues with a recent `mypy` update.   My proposal is to modify the return type of `Repository.get_contents()` to be `List[github.ContentFile.ContentFile]` instead of `Union[github.ContentFile.ContentFile, List[github.ContentFile.ContentFile], None]`. This would help to clean up the `mypy` issues and make the API clearer.  Something like this:  ```         if isinstance(data, list):             return [                 # Lazy completion only makes sense for files. See discussion                 # here: https://github.com/jacquev6/PyGithub/issues/140#issuecomment-13481130                 github.ContentFile.ContentFile(                     self._requester, headers, item, completed=(item[\"type\"] != \"file\")                 )                 for item in data             ]         return [             github.ContentFile.ContentFile(                 self._requester, headers, data, completed=True             )         ] ```  I'm happy to open a PR with this change or discuss further. Thanks!"
    },
    {
        "title": "[Feature] Make Repository class sortable",
        "body": "I would like to be able to sort a list of Repository classes like so:  ```python g = Github(getenv('GITHUB_TOKEN')) org = g.get_organization(getenv('GITHUB_ORG_NAME'))  for repo in org.get_repos():     repo_list.append(repo)  repo_list.sort() ```  Doing so results in an error as the Repository class does not implement comparison methods.  > The class must define one of \\_\\_lt\\_\\_(), \\_\\_le\\_\\_(), \\_\\_gt\\_\\_(), or \\_\\_ge\\_\\_(). In addition, the class should supply an \\_\\_eq\\_\\_() method.  Source: https://stackoverflow.com/a/7152650  For the built-in sort method, only \\_\\_lt\\_\\_() must be implemented.  I propose the name of the repository should be used for sorting."
    },
    {
        "title": "Fix NotSet being an unknown import and unusable in call signatures",
        "body": "Fixes #2192 ."
    },
    {
        "title": "NotSet is unknown import symbol",
        "body": "Checking this code: ```python3 from github.GithubObject import NotSet ``` with Pyright version 1.1.225 fails with the error \"NotSet\" is unknown import symbol.  The definition of `NotSet` from `GithubObject.py` is  ```python3 class _NotSetType:     def __repr__(self):         return \"NotSet\"      value = None   NotSet = _NotSetType() ```  A typing that would fix this unknown import problem is  ```python3 from typing import Final  class _NotSetType:     def __repr__(self):         return \"NotSet\"      value = None   NotSet:  Final = _NotSetType() ```  However, that doesn't allow me to use `NotSet` as a type, like:  ```python3 from typing import Union from github.GithubObject import NotSet  def print_something(a: Union[str, NotSet]) -> None:     if a is NotSet:         print(a.value)     else:         print(a) ```  Which fails with the error `Expected class type but received \"_NotSetType\"`."
    },
    {
        "title": "getting errors when running script in a virtual environment",
        "body": "Hello there!  I tried to run my script in a virtual miniconda environment but I am getting errors. I tried to install that package shown in the error message but it didn't work. How can I fix this? Thank you!  Here's the error message: ``` Traceback (most recent call last):   File \"C:\\Users\\User1\\Documents\\GitHub\\GitHubAutomationWindows\\automate_github.py\", line 1, in <module>     from github import Github   File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\github\\__init__.py\", line 56, in <module>     from github.MainClass import Github, GithubIntegration   File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\github\\MainClass.py\", line 59, in <module>     import github.Event   File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\github\\Event.py\", line 32, in <module>     import github.NamedUser   File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\github\\NamedUser.py\", line 44, in <module>     import github.Organization   File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\github\\Organization.py\", line 50, in <module>     import github.Repository   File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\github\\Repository.py\", line 125, in <module>     import github.PublicKey   File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\github\\PublicKey.py\", line 34, in <module>     from nacl import encoding, public   File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\nacl\\public.py\", line 17, in <module>     import nacl.bindings   File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\nacl\\bindings\\__init__.py\", line 17, in <module>     from nacl.bindings.crypto_aead import (   File \"C:\\CondaStuff\\miniconda3\\envs\\venv\\lib\\site-packages\\nacl\\bindings\\crypto_aead.py\", line 18, in <module>     from nacl._sodium import ffi, lib ModuleNotFoundError: No module named '_cffi_backend'  ```"
    },
    {
        "title": "Get all secrets from org",
        "body": "Get secrets from organization"
    },
    {
        "title": "Initial commit by POCO",
        "body": "Initial commit by POCO"
    },
    {
        "title": "feat: no update git refs method ",
        "body": "Fixes #2181"
    },
    {
        "title": "Issue getting a github repo by version",
        "body": "Running into issues trying to get a github repo by version with tag (`string`) value.  https://github.com/PyGithub/PyGithub/blob/001970d4a828017f704f6744a5775b4207a6523c/github/Repository.py#L3084  I'm pretty sure the above line needs to be `/releases/tag/{id}` not `/releases/tags/{id}`, as the latter url results in a `404 - Not Found`. Didn't look too hard at how the tests are written and why they pass but this seems like a bug."
    },
    {
        "title": "feat: no update git refs method",
        "body": "Currently there is no update git refs method in Repository.py which leads to commits not being associated to any branch on Github.  this request cannot be executed. https://docs.github.com/en/enterprise-server@2.22/rest/reference/git#update-a-reference"
    },
    {
        "title": "Is the PyGithub project dead? How can the community help?",
        "body": "Over the last months, I have seen many very good pull requests from the community that fix blocking bugs or add new features, as well as many questions around issues using this library. This project is actively being used by [25k (public) Github repositories](https://github.com/PyGithub/PyGithub/network/dependents?package_id=UGFja2FnZS01MjQ4NDg2OQ%3D%3D).  Unfortunately, this projects seems to be under-equipped with active maintainers. While the [MAINTAINERS](https://github.com/PyGithub/PyGithub/blob/master/MAINTAINERS) file lists six maintainers, there is only one lonely soul left driving this project. Blocking issues are mounting, ready pull requests are not reviewed, approved or merged, users getting annoyed by the lack of response while Github API is actively developing away from this Python implementation.  This is not sustainable.  Everyone knows and appreciates that this is open-source software and maintainers are putting their free time into this project. But this is no excuse to not improve the situation.  ## How can the community help?  \ud83d\udca1 I want to collect things that the community can do to revive this project. Please leave your ideas of supporting this project below.  ### Things the community can do: - try hard to minimize the time effort for maintainers:   - try to investigate the issues yourself, create bug fixes and pull requests   - try to do the same for other users that don't or can't do it   - review others' pull requests so that they are more likely to get approved   - answer other users' question   - *ideally, maintainers only have to approve and merge pull requests,     as well as cut releases or give broad guidance on design decisions* - individuals backed by companies that use this Python package should consider to invest   some of their work time in contributing back to this open-source software project - experienced users can help new users getting started - watch all activities:   ![image](https://user-images.githubusercontent.com/44700269/154294600-fd1b3183-82df-4136-8001-ef09e2adb98a.png) - support maintainer or contributors financially   ![image](https://user-images.githubusercontent.com/44700269/154294202-7c43c439-3b62-494d-83c5-e49c3c5c6775.png)  ### Things maintainers can do: - make the base of maintainers broader, **pass maintainer rights over to active contributors** - delegate code reviews to community members that have contributed or code reviewed before   - invite them directly to specific issues or pull requests - get completed pull requests merged and released - focus on on-boarding new maintainers and code reviewers rather than fixing bugs  ## Who volunteers?  Please leave a comment below if you volunteer for any of these roles: - maintainer (a few hours per week would revive this project) - code reviewer   - get pull requests into a good shape so that maintainers have to spend less time and are more likely to approve - experienced user   - answer questions and resolve issues related to usage of the library, not bugs or new features"
    },
    {
        "title": "Fix get events not returning user events",
        "body": "The `get_events()` function from the `AuthenticatedUser` class doesn't return events of only the user, it returns all events.   I have modified the function to return user events only, with a flag on getting Private and Public events (`False`, Default), or just Public events (`True`).   The original functionality is covered by `Github.get_events()`. "
    },
    {
        "title": "Non deterministic behavior when iterating over paginatedList after calling search_code",
        "body": "Hello community, I am using the `search_code` function to find repositories which used a specific term in a file. When iterating over the result within a for loop and just printing the current counter to see how far the loop goes, the program does **not** reach `result.totalCount` as expected. It stops more or less randomly somewhere before.   ``` query = \"\\\"known_third_party = \\\"kedro\\\"\\\" in:file language:toml\" counter = 0 result = github.search_code(query) print(str(result.totalCount)) for code in result:     counter += 1     print(counter, code.repository.clone_url)     time.sleep(1) ```  Executing the above code three times in a row, the totalCount was always 340, but the program stopped at 280, 311 and 318.  Can you please help me with that? Why does the loop not reach the last item?   Thanks a lot for your help!  With best regards, Alex   "
    },
    {
        "title": "AttributeError: 'NoneType' object has no attribute 'startswith' from get_user with 403 response",
        "body": "Looks like the same root issue as #1399 but that was closed and I can't re-open it (not sure why it was closed).  This is with pygithub 1.55:  ```   File \"/home/travis/virtualenv/python3.8.1/lib/python3.8/site-packages/github/MainClass.py\", line 256, in get_user     headers, data = self.__requester.requestJsonAndCheck(   File \"/home/travis/virtualenv/python3.8.1/lib/python3.8/site-packages/github/Requester.py\", line 353, in requestJsonAndCheck     return self.__check(   File \"/home/travis/virtualenv/python3.8.1/lib/python3.8/site-packages/github/Requester.py\", line 378, in __check     raise self.__createException(status, responseHeaders, output)   File \"/home/travis/virtualenv/python3.8.1/lib/python3.8/site-packages/github/Requester.py\", line 418, in __createException     elif status == 403 and output.get(\"message\").startswith( AttributeError: 'NoneType' object has no attribute 'startswith' ```"
    },
    {
        "title": "Add branch protection support for required_status_checks `checks` object",
        "body": "It's possible to set [branch protections](https://pygithub.readthedocs.io/en/latest/github_objects/BranchProtection.html#github.BranchProtection.BranchProtection.required_status_checks) using the [contexts](https://pygithub.readthedocs.io/en/latest/github_objects/RequiredStatusChecks.html#github.RequiredStatusChecks.RequiredStatusChecks.contexts) field within the `RequiredStatusChecks` class, however, according to the documentation, [contexts is deprecated](https://docs.github.com/en/rest/reference/branches#update-branch-protection).  `checks` (an array of objects) will replace `contexts` as it allows you to configure the source of the check.   An example of the raw request to set required status checks using the `checks` object is:  ```     \"required_status_checks\":{         \"strict\": false,         \"checks\": [             {                 \"context\": \"A Required Check set to a given app id\",                 \"app_id\": 3414             },             {                 \"context\": \"A Required Check set to any source\",                 \"app_id\": -1             }         ]     } ```  ![image](https://user-images.githubusercontent.com/11973031/149074928-b8fd68dc-9e0b-4add-94ad-176b993b345a.png) "
    },
    {
        "title": "Document the difference between commit and gitcommit",
        "body": "closes #1917  I squashed the changes from #1941 and rebased onto master. #1941 should be closed after merging this PR."
    },
    {
        "title": "Remove enableRetry and setPoolSize from Framework",
        "body": "Using these methods in a test has side-effects on subsequent tests.  For instance, after calling `Framework.setPoolSize(20)` in test `PollSize.py`, all subsequent tests run with `Github.__requester.__pool_size = 20`. All tests before `PoolSize.py` run with `Github.__requester.__pool_size = None`.  The same holds for `Framework.enableRetry`.  Added a comment to avoid adding similar methods in the future (as I was about to do for `per_page`, which escaped and broke all subsequent tests)."
    },
    {
        "title": "Support for projects(Beta)",
        "body": "This an amazing project for interacting with GitHub using python. Is there any plans to integrate Projects(Beta) support in near future?"
    },
    {
        "title": "fixes #2110",
        "body": "Adapted code to new create release API parameters"
    },
    {
        "title": "Webhook: github.GithubException.UnknownObjectException: 404",
        "body": "Using https://pygithub.readthedocs.io/en/latest/examples/Webhook.html i get the following error:  ``` S:\\Projects\\Python\\github-bot\\venv\\Scripts\\python.exe S:/Projects/Python/github-bot/main.py Traceback (most recent call last):   File \"S:\\Projects\\Python\\github-bot\\main.py\", line 73, in <module>     create_webhook()   File \"S:\\Projects\\Python\\github-bot\\main.py\", line 66, in create_webhook     repo = g.get_repo(\"{owner}/{repo_name}\".format(owner=OWNER, repo_name=REPO_NAME))   File \"S:\\Projects\\Python\\github-bot\\venv\\lib\\site-packages\\github\\MainClass.py\", line 330, in get_repo     headers, data = self.__requester.requestJsonAndCheck(\"GET\", url)   File \"S:\\Projects\\Python\\github-bot\\venv\\lib\\site-packages\\github\\Requester.py\", line 353, in requestJsonAndCheck     return self.__check(   File \"S:\\Projects\\Python\\github-bot\\venv\\lib\\site-packages\\github\\Requester.py\", line 378, in __check     raise self.__createException(status, responseHeaders, output) github.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest/reference/repos#get-a-repository\"} ```"
    },
    {
        "title": "Repository get_contents() 302 redirect no longer functional b/c Github response headers no longer contain status",
        "body": "For the Get Content Repository endpoint: https://docs.github.com/en/rest/reference/repos#get-repository-content  When the the `{path}` on the endpoint ends with a trailing `/`, the api responds with a `302 Found` and therefore PyGithub must then perform a GET on the url in `location` response header.  This currently is handled in the below code in PyGithub: https://github.com/PyGithub/PyGithub/blob/master/github/Repository.py#L1824-L1828  ```python         # Handle 302 redirect response         if headers.get(\"status\") == \"302 Found\" and headers.get(\"location\"):             headers, data = self._requester.requestJsonAndCheck(                 \"GET\", headers[\"location\"], parameters=url_parameters             ) ```   The issue I am facing with this now is that PyGithub expects there to be a `status` in the response headers, however the Github api _no longer_ sends `status` as a response header.  I found this github support community post confirming this change: https://github.community/t/githubs-api-is-not-returning-status-in-its-response-header/160531  See the below cURL commands where I confirmed...  This request returns `200` when I send `github` as the path ```bash {18:49}~ \u27ad curl -I --request GET 'https://api.github.com/repos/PyGithub/PyGithub/contents/github' \\ --header 'Authorization: Bearer <token redacted>' HTTP/2 200 server: GitHub.com date: Wed, 08 Dec 2021 23:49:06 GMT content-type: application/json; charset=utf-8 content-length: 198400 cache-control: private, max-age=60, s-maxage=60 vary: Accept, Authorization, Cookie, X-GitHub-OTP etag: \"c4c07fd89012d914782b5cc0b5fc2028374d8a35\" last-modified: Wed, 08 Dec 2021 05:34:29 GMT x-oauth-scopes: repo, user, workflow x-accepted-oauth-scopes: github-authentication-token-expiration: 2022-03-08 23:17:54 UTC x-github-media-type: github.v3; format=json x-ratelimit-limit: 5000 x-ratelimit-remaining: 4988 x-ratelimit-reset: 1639009499 x-ratelimit-used: 12 x-ratelimit-resource: core access-control-expose-headers: ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset access-control-allow-origin: * strict-transport-security: max-age=31536000; includeSubdomains; preload x-frame-options: deny x-content-type-options: nosniff x-xss-protection: 0 referrer-policy: origin-when-cross-origin, strict-origin-when-cross-origin content-security-policy: default-src 'none' vary: Accept-Encoding, Accept, X-Requested-With x-github-request-id: DB89:24AF:6CA656:10E89FA:61B14472 ```  This request returns `302` when I send `github/` as the path ```bash {18:49}~ \u27ad curl -I --request GET 'https://api.github.com/repos/PyGithub/PyGithub/contents/github/' \\ --header 'Authorization: Bearer <token redacted>' HTTP/2 302 server: GitHub.com date: Wed, 08 Dec 2021 23:49:09 GMT content-type: text/html;charset=utf-8 content-length: 0 location: https://api.github.com/repositories/3544490/contents/github x-ratelimit-limit: 5000 x-ratelimit-remaining: 4987 x-ratelimit-reset: 1639009499 x-ratelimit-used: 13 x-ratelimit-resource: core access-control-expose-headers: ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset access-control-allow-origin: * strict-transport-security: max-age=31536000; includeSubdomains; preload x-frame-options: deny x-content-type-options: nosniff x-xss-protection: 0 referrer-policy: origin-when-cross-origin, strict-origin-when-cross-origin content-security-policy: default-src 'none' vary: Accept-Encoding, Accept, X-Requested-With x-github-request-id: DB8A:2115:129B94E:24BBC37:61B14475 ```    In both of these cases, we can see there is no `status` header being returned by Github.   Therefore, when I replicate this function with the trailing `/` in the path with PyGithub, I get the following error b/c PyGithub fails to perform the necessary redirect since in the above if statement, `headers.get(\"status\") == \"302 Found\"` does not return as True.  Python Code ```python from github import Github from github import Repository  g = Github(\"<token redacted>\")  repo = g.get_repo(\"PyGithub/PyGithub\")  content = repo.get_contents(\"github/\") ```  Output ```bash Traceback (most recent call last):   File \"/Users/webbchawla/Documents/Projects/pygit_tst/main.py\", line 10, in <module>     content = repo.get_contents(\"github/\")   File \"/Users/webbchawla/Documents/Projects/pygit_tst/.venv/lib/python3.9/site-packages/github/Repository.py\", line 1810, in get_contents     return github.ContentFile.ContentFile(   File \"/Users/webbchawla/Documents/Projects/pygit_tst/.venv/lib/python3.9/site-packages/github/GithubObject.py\", line 283, in __init__     super().__init__(requester, headers, attributes, completed)   File \"/Users/webbchawla/Documents/Projects/pygit_tst/.venv/lib/python3.9/site-packages/github/GithubObject.py\", line 84, in __init__     self._storeAndUseAttributes(headers, attributes)   File \"/Users/webbchawla/Documents/Projects/pygit_tst/.venv/lib/python3.9/site-packages/github/GithubObject.py\", line 96, in _storeAndUseAttributes     self._useAttributes(attributes)   File \"/Users/webbchawla/Documents/Projects/pygit_tst/.venv/lib/python3.9/site-packages/github/ContentFile.py\", line 191, in _useAttributes     if \"content\" in attributes:  # pragma no branch TypeError: argument of type 'NoneType' is not iterable ```   For now, I am able to work around this issue by doing `.rstrip(\"/\")` on the path before calling `get_contents()` but I figured it would be wise for PyGithub to handle the redirect case as well, however the maintainers feel is the best way.   Let me know if you need any more examples or clarification \ud83d\ude04  "
    },
    {
        "title": "Fix handling of `create_git_blob`'s result",
        "body": "`create_git_blob` does not actually return the entire blob object content, per the OpenAPI description it only returns a `short-blob` with the `sha` and `url` properties whereas a \"full\" blob also has `encoding`, `content`, and `size` (and `node_id` but that's not usually relevant).  Fix by marking the `GitBlob` returned as non-complete, this way normal completion will fetch the additional data iff it is accessed.  However testing github's behaviour raises a few more questions here: `testCreateGitBlob` specifies the `latin1` encoding, per github's documentation that's not actually supported but apparently github simply treats anything other than `\"base64\"` as `\"utf-8\"`, which is really \"text\": the json string gets encoded to utf-8 and stored as-is in the blob. So that test's encoding is really misleading.  I figure the interface could be improved there, but it's not entirely clear to me whether `PyGithub` is to provide a shallow Python interface to Github or possibly a more high-level one e.g. one could imagine a design where `create_git_blob` would automatically select between encoding depending on the input type (`str` | `bytes`) thus making the explicit encoding unnecessary, the encoding could also be an Enum and default to text-equivalent (`\"utf-8\"`) with base64 being opt-in.  An other annoyance with the interface is it looks like github *always returns base64-encoded content*, again depending on the suitability of higher-level API `GitBlob` could have a utility property handling that automatically rather than requiring the user be aware of the issue. "
    },
    {
        "title": "Fix type of commit for `create_file`",
        "body": "The `commit` key of `create_file`'s result currently uses `github.Commit.Commit`, but that does not match the data model of the endpoint: while ill documented on docs.github.com, looking at the published schema (via https://github.com/github/rest-api-description or more readably https://github.com/octokit/types.ts which is automatically generated from the former) `file-commit.commit` looks significantly more like a `git-commit` than a `commit`:  * `commit`'s author and committer are git*hub* objects (`nullable-simple-user`), while `file-commit.commit`'s are git objects (triplets of name, email, and date) * `commit` embeds the tree, and message in a sub-object, while `file-commit.commit` has them at the toplevel * `file-commit.commit` has no `stats` or `files` properties, or `comments_url`  In all of these, `file-commit.commit` matches `git-commit` exactly.  The only real divergence between `git-commit` and `file-commit.commit` is that the schema indicates all of `file-commit.commit`'s properties are optional, but I think it's a case of the endpoint being under-specified and the properties *not* being marked required, rather than them being explicitly optional. See github/rest-api-description#650 for an issue on that subject with more information."
    },
    {
        "title": "Organization self-hosted runner registration missing",
        "body": "I ran into a few methods that I needed that are not yet present.  ```python def get_org_installation(self, org):     \"\"\"     :calls: `GET /orgs/{org}/installation <https://docs.github.com/en/rest/reference/apps#get-an-organization-installation-for-the-authenticated-app>`_     :param org: str     :rtype: :class:`github.Installation.Installation`     \"\"\"     headers = {         \"Authorization\": f\"Bearer {self.create_jwt()}\",         \"Accept\": Consts.mediaTypeIntegrationPreview,         \"User-Agent\": \"PyGithub/Python\",     }      response = requests.get(         f\"{self.base_url}/orgs/{org}/installation\",         headers=headers,     )     response_dict = response.json()     return Installation.Installation(None, headers, response_dict, True)  GithubIntegration.get_org_installation = get_org_installation  class RunnerToken(github.GithubObject.NonCompletableGithubObject):     def __repr__(self):         return self.get__repr__({\"expires_at\": self._expires_at.value})      @property     def token(self):         \"\"\"         :type: string         \"\"\"         return self._token.value      @property     def expires_at(self):         \"\"\"         :type: datetime         \"\"\"         return self._expires_at.value      def _initAttributes(self):         self._token = github.GithubObject.NotSet         self._expires_at = github.GithubObject.NotSet      def _useAttributes(self, attributes):         if \"token\" in attributes:  # pragma no branch             self._token = self._makeStringAttribute(attributes[\"token\"])         if \"expires_at\" in attributes:  # pragma no branch             self._expires_at = self._makeDatetimeAttribute(                 re.sub(r'\\.\\d{3}Z$', 'Z', attributes[\"expires_at\"])             )   def get_self_hosted_runner_registration_token(self):     \"\"\"     :calls: `POST /orgs/{owner}/actions/runners/registration-token <https://docs.github.com/en/rest/reference/actions#create-a-registration-token-for-an-organization>`_     :rtype: :class:`RunnerToken`     \"\"\"     headers, data = self._requester.requestJsonAndCheck(         \"POST\", f\"{self.url}/actions/runners/registration-token\"     )     return RunnerToken(None, headers, data, True)  def get_self_hosted_runner_remove_token(self):     \"\"\"     :calls: `POST /orgs/{owner}/actions/runners/remove-token <https://docs.github.com/en/rest/reference/actions#create-a-remove-token-for-an-organization>`_     :rtype: :class:`RunnerToken`     \"\"\"     headers, data = self._requester.requestJsonAndCheck(         \"POST\", f\"{self.url}/actions/runners/remove-token\"     )     return RunnerToken(None, headers, data, True)  github.Organization.Organization.get_self_hosted_runner_registration_token = get_self_hosted_runner_registration_token github.Organization.Organization.get_self_hosted_runner_remove_token = get_self_hosted_runner_remove_token  ```"
    },
    {
        "title": "Unnecessary API requests",
        "body": "From my reading of the code, it seems that posting a Reaction to an Issue Comment results in two unnecessary get requests. I haven't been able to watch the actual network traffic to verify this though.  In the following example it looks like the two get requests will be mabe but are not needed. ```py # No API call because of lazy=True repo = github.get_repo(repo_name, lazy=True) # GET: /repos/{owner}/{repo}/issues/{id} issue = repo.get_issue(number=issue_id) # GET: /repos/{owner}/{repo}/issues/comments/{id} comment = issue.get_comment(comment_id) # POST: /repos/{owner}/{repo}/issues/comments/{id}/reactions reaction = comment.create_reaction(reaction_type) ```  Is this right? Can we add `lazy` to all get methods?"
    },
    {
        "title": "Support for secret scanning",
        "body": "We'd like to enable Secret Scanning programmatically in our repos. This is available via the API already:  https://docs.github.com/en/rest/reference/repos#update-a-repository  Can you update this to support enable/disable of secret scanning? Thanks!"
    },
    {
        "title": "Issue Events / Timeline Events API question",
        "body": "The [Issues Event API](https://docs.github.com/en/rest/reference/issues#events) and [Timeline Event API](https://docs.github.com/en/rest/reference/issues#timeline) for issues both return similar data [according to the \"Issue event types\" documentation](https://docs.github.com/en/developers/webhooks-and-events/events/issue-event-types).   Under [Issue event object common properties](https://docs.github.com/en/developers/webhooks-and-events/events/issue-event-types#issue-event-object-common-properties), it's specifically mentioned:  > Issue events all have the same object structure, except events that are only available in the Timeline Events API. Some events also include additional properties that provide more context about the event resources. Refer to the specific event to for details about any properties that differ from this object format.  The properties listed in the table below this are all part of the [`TimelineEvent`](https://pygithub.readthedocs.io/en/latest/github_objects/TimelineEvent.html) class. However, has mentioned above, there are several event types specific to the Timeline Events API that have additional properties that aren't shared. In fact, the `TimelineEvent` class in PyGitHub includes additional `author_association` and `body` attributes which are in the `commented` and `reviewed` event types and the `source` attribute which is in the `cross-referenced` event.   However, there are plenty of other event types that have additional properties that are not on `TimelineEvent` and I'm wondering how I can access them. As an example, I'd like to be able to access the `sha` property for the [committed](https://docs.github.com/en/developers/webhooks-and-events/events/issue-event-types#committed) event. Is there an \"escape hatch\" in the API for accessing these additional attributes? If not, would a PR be accepted that adds these attributes to `TimelineEvent`? It does seem that if one was to try to keep the strong-typing, you'd need to express some sort of sum type that would allow you to properly model the disjointed properties that come from the timeline events API.  Thanks for any help you can provide. I'd be willing to open a PR if necessary to move the library in the right direction.  "
    },
    {
        "title": "Support for Environments + Environment secrets",
        "body": "Would be nice to have support for environment secrets or environments in general    https://docs.github.com/en/rest/reference/repos#environments  https://docs.github.com/en/rest/reference/actions#get-an-environment-secret"
    },
    {
        "title": "Add support for merge-upstream Repository action",
        "body": "It's now possible to trigger a merge from upstream on a branch directly via the API rather than trying to compare commit hashes and editing refs. I've added support for the new action.  Note: as of creating this pull request, the new action is beta. It may change. I'm creating this pull request now to track it. It does, however, currently work."
    },
    {
        "title": "make Requester thread-safe",
        "body": "HTTPSRequestsConnectionClass and HTTPRequestsConnectionClass are not thread safe. They can be simply use one `request` function to do the request and not saving any URL as a member parameter."
    },
    {
        "title": "Support GitHub Pages Configuration API",
        "body": "Under `/repos/{owner}/{repo}/pages`, the source (branch and directory) can be configured. My use case is that my documentation exists in `/docs` on branch `main`,  which requires a manual step to configure a new project.  ```sh curl \\   -X POST \\   -H \"Accept: application/vnd.github.switcheroo-preview+json\" \\   https://api.github.com/repos/octocat/hello-world/pages \\   -d '{\"source\":{\"branch\":\"branch\",\"path\":\"path\"}}' ```"
    },
    {
        "title": "how to disable/enable github actions on repo",
        "body": "Hi there,  the github web ui allow to enable/disable github action on a per repository base, as well as some other github actions related limitations.  it seems like pygithub has no support to do the same, or am i missing something?  Kind Regards"
    },
    {
        "title": "Update valid permissions",
        "body": "`add_to_collaborators` accepts a few more"
    },
    {
        "title": "Requester.rate_limiting mixes limits of different resources",
        "body": "GitHub API responses indicate rate limits via HTTP headers:      x-ratelimit-limit: 5000     x-ratelimit-remaining: 4992     x-ratelimit-reset: 1625481641     x-ratelimit-used: 8     x-ratelimit-resource: core  The `limit` and `remaining` are store in `Requester.rate_limiting`.  Different requests count to different limits, searches for instance do not count to the `core` resource:      x-ratelimit-limit: 30     x-ratelimit-remaining: 29     x-ratelimit-reset: 1625478450     x-ratelimit-used: 1     x-ratelimit-resource: search  This limit will overwrite earlier `core` limits.  It is unexpected that the resource that `MainClass.rate_limiting` refers to depends on the most recent API call. It should always be `core` or there should be calls for different resources.  Even better would be if `rate_limiting` returns an instance of `RateLimit`, which is updated from those headers or when `MainClass.get_rate_limit` is called."
    },
    {
        "title": "Add a bunch of missing urllib.parse.quote calls",
        "body": "There were previously lots of places in PyGithub where public methods take a string value and interpolate it directly into a URL without URL-encoding it. This results in a bunch of bugs; for instance, trying to get a branch with a `#` in its name fails.  It also conceivably introduces some kind of security issue somewhere, since anywhere that an application is passing a user-provided value to one of these methods, a user can exploit this to cause a request to be sent to a malformed URL or to add arbitrary additional path segments to the URL after the interpolated value or to add an arbitrary query string (although I have not been able to think of a realistic exploit based on this, and am not confident that one really exists).  To try to fix this, I did a regex search across the whole codebase for  ``` f\"{self.url}/.+{ ```  which finds expressions like  ``` f\"{self.url}/labels/{label}\" ```  or   ``` f\"{self.url}/comments/{id}\" ```  and audited each such expression. If the value being interpolated into the URL was already being explicitly URL-encoded in the method, I left it alone. If it was guaranteed via an `assert isinstance(...)` check to be a number, I left it alone. If it was the `._identity` property of a `PyGithub` object whose `_identity` is guaranteed not to contain any special characters in need of URL-encoding, I left it alone. In all other cases, it was an arbitrary string, and in those cases, I URL-encoded it. I did this even in cases where the argument represented something like a GitHub username which cannot legally contain any special characters that need URL-encoding, for a couple of reasons: * there *might* be a security benefit to doing so in those cases, for the reason given above * if somebody tries to look up an illegal username like `foo?bar`, it still seems like the correct thing for the library to do is to faithfully encode that username and send it to the API, and get back an appropriate error from GitHub, rather than sending a malformed URL or a URL where `?bar` is treated as a query string (which might produce a seemingly-nonsensical error that complains about user `foo` not existing, or worse, might actually return existing user `foo`).  I've manually tested my change to check it fixes getting a branch by name when the branch name contains a `#` character. Here's an attempt to get such a branch without this change:  ``` >>> from github import Github >>> g = Github() >>> repo = g.get_repo('ExplodingCabbage/PyGithub') >>> repo.get_branch('foo#bar') Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>   File \"/home/mark/PyGithub/github/Repository.py\", line 1643, in get_branch     \"GET\", f\"{self.url}/branches/{branch}\"   File \"/home/mark/PyGithub/github/Requester.py\", line 355, in requestJsonAndCheck     verb, url, parameters, headers, input, self.__customConnection(url)   File \"/home/mark/PyGithub/github/Requester.py\", line 378, in __check     raise self.__createException(status, responseHeaders, output) github.GithubException.GithubException: 404 {\"message\": \"Branch not found\", \"documentation_url\": \"https://docs.github.com/rest/reference/repos#get-a-branch\"} ```  And here's an attempt *with* this change:  ``` >>> from github import Github >>> g = Github() >>> repo = g.get_repo('ExplodingCabbage/PyGithub') >>> repo.get_branch('foo#bar') Branch(name=\"foo#bar\") ```  I haven't tested anything else, and indeed am not familiar with several of the API calls I've touched in this PR. I'd appreciate if a maintainer familiar with them could review my changes sceptically, and maybe test them if needed.  Note that this is kind of a breaking change, since some users may have worked around this bug by calling `urllib.parse.quote` on values in their own code before passing them to PyGithub, and such values will now get doubly encoded. As such, this should be called out as a breaking change in the change notes."
    },
    {
        "title": "Github.oauth_scopes property is None initially",
        "body": "I do not understand why _oauth_scopes_ is not set when the object is created. It only gets populated after some method or property is called.  ```python from github import Github token = 'xxx'  # Some Github token with at least 1 scope gh = Github(token); print(gh.oauth_scopes)  # None gh.rate_limiting print(gh.oauth_scopes)  # ['public_repo'] ```  Python 3.8.5, PyGithub 1.55"
    },
    {
        "title": "Make `len()` compatible with `PaginatedList` (as an alias for `totalCount`)",
        "body": "Hello :wave: ,  since the `PaginatedList` is considered iterable, I think it is reasonable to be able to call `len()` on it."
    },
    {
        "title": "Clarify `github.Commit` vs `github.GitCommit`",
        "body": "I can't find any documentation, in the docs or in comments, explaining the difference between `Commit` and `GitCommit`.  This is an issue because it seems that the return value of some functions arbitrarily use and require one of the two; for example, `Branch.commit` returns a `Commit`, but the commits passed as parent commits to `Repository.create_git_commit` expect a `GitCommit`."
    },
    {
        "title": "Create team is missing parent_team_id parameter",
        "body": "https://github.com/PyGithub/PyGithub/blob/34d097ce473601624722b90fc5d0396011dd3acb/github/Organization.py#L585-L631  https://docs.github.com/en/rest/reference/teams#create-a-team  It appears that the organization team creation method is missing a new parameter `parent_team_id`.   https://github.com/PyGithub/PyGithub/pull/1840"
    },
    {
        "title": "Update Installation object with attributes and related methods",
        "body": "- [x] Add missing attributes in the Installation object - [x] Add `get_installation_by_id()` method in the Main class (tested locally) - [x] Move `GithubIntegration.get_installation()` to `Github.get_installation_by_repo()` (tested locally) - [x] Update docstring for the mentioned methods - [x] Add test for Installation object attributes - [x] Add test for `Github.get_installation_by_id()` - [x] Add test for `Github.get_installation_by_repo()`  Also, the `Installation.get_repos()` method should be moved to the main class as `Github.get_installation_repos()` because that method requires an installation access token and also the `Installation` object is `NonCompletableGithubObject`.  Fixes: #1781  Fixes: #1776 "
    },
    {
        "title": "Allow for deleting and restoring branch associated with PR",
        "body": "Adding logic for deleting/restoring branches associated with a PR, as well as forcing a delete. Fixes #580  "
    },
    {
        "title": "Add 'twitter_username' ",
        "body": "Twitter username support was added this year. It would be great if you could add its access method in the AuthenticatedUser object as I checked that all other relevant access methods such as bio, avatar URL, blog link lie in this class. Also, as the twitter_username is returned in api.github.com/user/{username}, it makes sense to get this value here.  Can I contribute to this issue?"
    },
    {
        "title": "[FEAT] support discussion comments",
        "body": "As far as I could see in the documentation, there is no way to add or list comments...  I'd like support for discussion comments as per https://developer.github.com/v3/teams/discussions/#update-a-discussion.  I'll be implementing this myself for a personal project, and I'd be happy to port it natively to the project if this is something people would like to see!  "
    },
    {
        "title": "Support repository transfer",
        "body": "Please add support for [repo transfer](https://developer.github.com/v3/repos/#transfer-a-repository)"
    },
    {
        "title": "OAuth access token Failure Errors are Masked",
        "body": "I created an PyGithub OAuth application using the client ID and client secret issued by GitHub. Unfortunately, upon calling `get_access_token` on that app (with the callback code from GitHub's callback), I do not get a usable access_token. See below:  ``` github_app = github.Github().get_oauth_application(CLIENT_ID, CLIENT_SECRET) response = github_app.get_access_token(CALLBACK_CODE) # r.token, r.scope, and r.type are all `None`, and r._token is `NotSet` ```  My PyGithub version is 1.53. Please advise; I have so far looked at #1021 ."
    },
    {
        "title": "`get_login_url` to support the scope parameter",
        "body": "A scope parameter (to correspond to Github's scope parameter described [here](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#1-request-a-users-github-identity)) would be great! I believe you can simply add it here: https://github.com/PyGithub/PyGithub/blob/master/github/ApplicationOAuth.py#L58"
    },
    {
        "title": "Adding the team-sync endpoints",
        "body": "Using the Enterprise Team Organization it is possible to use the team synchronization feature.  https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-a-team  Making it possible to list the groups for an organization or a team.  Also adding, removing a synched group from a Team."
    },
    {
        "title": "Issue 1655: Add authorize credentials list and removal on organization under SAML",
        "body": "The objective is to implement the two available methods to list and remove credential ids linked to an Organization that have been Authorize by the user to act as authentication on the Organization.  Added the two endpoints available under the Organization on the GitHub API https://developer.github.com/v3/orgs/#list-saml-sso-authorizations-for-an-organization https://developer.github.com/v3/orgs/#remove-a-saml-sso-authorization-for-an-organization  Also needed to create a new Object to handle the return payload of the API since the raw data differs from the Authorization Object..  Added one unit test to list the credentials under an Organization, but I do not have a Organization that is  SAML protected that I can use to display in the unittest.. So I added on a personnal organization with no SAML, so an empty List is validated.   #1655 "
    },
    {
        "title": "Adding authorize credentials listing and delete in a organisation",
        "body": "Adding two functions to handle to rest endpoint of GitHub: https://docs.github.com/en/rest/reference/orgs#list-saml-sso-authorizations-for-an-organization https://docs.github.com/en/rest/reference/orgs#remove-a-saml-sso-authorization-for-an-organization  #1676   In order to control the current authorize credentials permitted under the organisation and delete a credentia_ id if required."
    },
    {
        "title": "Async support",
        "body": "What do you think about PyGithub async support? If I do async support for PyGithub - do you accept it?"
    },
    {
        "title": "unable to read or set the owners for an organization",
        "body": "I am trying to make a script that is both capable of determining the current owners of an org and setting them. I started by trying to just read who the current owners are but am having issues with that.  I've tried to do  ``` git = Github(access_token) self.org = self.git.get_organization('ORG') for user in self.org.get_members(role=\"admin\"):    print(f\"user = {user}, user.permissions = {user.permissions}, user.role = {user.role}, user.site_admin = {user.site_admin}, user.type = {user.type}\") ```  But when it comes across a member that is an admin, it prints out  ``` 2020-04-20 21:14:43 = INFO - user = NamedUser(login=\"userX\"), user.permissions = None, user.role = None, user.site_admin = False, user.type = User ```  What am I doing wrong?"
    },
    {
        "title": "Add support for modifying PR draft status",
        "body": "`PullRequest.edit` does not allow a `draft` attribute:  ```python def edit(         self,         title=github.GithubObject.NotSet,         body=github.GithubObject.NotSet,         state=github.GithubObject.NotSet,         base=github.GithubObject.NotSet,     ): ```"
    },
    {
        "title": "SCIM API for SAML linked accounts",
        "body": "We would like to be able to make use of the SCIM API (https://developer.github.com/v3/scim/) within the pyGithub package. This would enable us to search users in our organisation by their SCIM attributes, such as the idp provided email address, nameID. These attributes cannot be changed by the organisation members, unlike their personal github account details, so would provide an immutable set of search criteria for us. "
    },
    {
        "title": "GitHub Actions support",
        "body": "Docs here: https://developer.github.com/v3/actions/  Are there plans to add support for GitHub Actions? The API is still in beta, but I would suspect that it won't change much in the future."
    },
    {
        "title": "search_issues() result has totalCount maxed out to 1000",
        "body": "The paginated list returned from a search_issues() will report a totalCount that maxes out to 1000 when a search query results in more than 1000 items. The totalCount() method in PaginatedList() will get headers and data from result of a requester.requestJsonAndCheck() using the first URL. The logic then tests to see if 'link' is not in headers which in my case there is a 'link' so it falls to the else side and parses the lastUrl line for 'page' which is 1000.  Problem though is that in my search, the original 'data' structure has a valid 'total_count' field of 3041 so I'm not sure why the logic tries to derive something from the lastUrl which is generating an incorrect value?  And if I iterate through the PaginatedList returned I count only 1020 items so I'm not able to iterate through all 3041 items. Note that I put rate limiting code in the iteration loop to sleep checking on get_rate_limit().search.remaining to go nonzero. "
    },
    {
        "title": "Support all features of SourceImport",
        "body": "When doing a source import, there are a number of additional operations available once the import has been started. It would be nice if support for these could be implemented. For me personally, mapping authors is the most needed, but it would also be useful to support getting large files, and being able to cancel an import. "
    },
    {
        "title": "PaginatedList.totalCount KeyError: 'page' with large results",
        "body": "When using get_repo().totalCount on a small result set (only my own repositories) totalCount returns the repository count correctly. When querying my enterprise Github for a complete list of repositories, the following error occurs:  ```bash Traceback (most recent call last):   File \"./test-repo-list.py\", line 9, in <module>     print(\"Found %s repositories.\" % full_repo_list.totalCount)   File \"/usr/local/lib/python3.7/dist-packages/github/PaginatedList.py\", line 175, in totalCount     self.__totalCount = int(parse_qs(lastUrl)['page'][0]) KeyError: 'page' ````  I am using Python 3.7.1 and the pip-installed version 1.43.4 of PyGithub with a Github Enterprise version 2.14.7.  This is the code I have used to test this:  ```python #!/usr/bin/env python3.7 from github import Github import os  api_token = os.getenv('GITHUB_TOKEN', None) g = Github(base_url=\"https://mygithubhost.lads\", login_or_token=api_token)  full_repo_list = g.get_repos() print(\"Found %s repositories.\" % full_repo_list.totalCount) ```  I did notice, after some skimming of PaginatedList.py, that the Link headers differ between the two tests. When collecting just my own repositories, I see the \"last\" link returned in the link header, but when querying for all repositories I only see \"next\" and \"first\" links returned.  g.get_user().get_repos(): ```json 'link':'<https://mygithubhost.lads/api/v3/user/repos?per_page=1&page=2>; rel=\"next\", <https://mygithubhost.lads/api/v3/user/repos?per_page=1&  page=10>; rel=\"last\"'` ```  g.get_repos(): ```json 'link':'<https://mygithubhost.lads/api/v3/repositories?per_page=1&since=112>; rel=\"next\", <https://mygithubhost.lads/api/v3/repositories{?since}>; rel=\"first\"' ```  I don't know what's causing this difference in behavior, though.  If I don't try to get totalCount from the object, it works as expected, but totalCount specifically seems to fail."
    },
    {
        "title": "Support  application/vnd.github.VERSION.diff",
        "body": "As documented here: https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests.   Required for determining position for creating a review comment."
    },
    {
        "title": "PyGithub example usage",
        "body": "Motivation: #862 #456 #321 #584 #762   PyGithub is a great library, however it may not be intuitive to use at the beginning. Not everyone is a Github API expert, so I am trying to provide some working examples (recipes) that will hopefully help you get started.  The skeleton has been setup [here](https://github.com/PyGithub/PyGithub/tree/master/doc/examples) and the example docs is already live on readthedocs as usual:  https://pygithub.readthedocs.io/en/latest/examples.html  Note that the list will expand and **any PR to add more examples is extremely welcome** \ud83d\ude04   If you want to see any examples not covered here, just leave a comment."
    },
    {
        "title": "usage of suspend a github enterprise user",
        "body": "For Github Enterprise usage, if we need to suspend an inactive user, can we have a suspend_user function call implemented? The only solution currently is directly making a API call? https://developer.github.com/v3/users/administration/"
    },
    {
        "title": "Support for github apps",
        "body": "I am trying to perform oauth using my github app and then read authenticated users repository and organization. However for queries related to \"list installations for user\", \"list repositories accessible to the user for installation\" and many other endpoints, I am not able to get the pygithub apis for the same.  ref link : http://pygithub.readthedocs.io/en/latest/apis.html  PS. Previously I was using oauth app and was able to perform the flow, now since I also require to listen to events for which I needed to subscribe to webhooks, so I switched to github app."
    },
    {
        "title": "Support for github enterprise pre-receive-hooks",
        "body": "Does this lib support github enterprise, especially the pre-receive-hook apis?  - https://developer.github.com/v3/repos/pre_receive_hooks - https://developer.github.com/v3/orgs/pre_receive_hooks/ - https://developer.github.com/v3/enterprise-admin/pre_receive_hooks/   "
    },
    {
        "title": "GithubIntegration with APP specific APIs",
        "body": "It would be nice to have the class `GithubIntegration` coming with calls like `get_installations()`, `get_installation(:installation_id).get_repos()`, etc. Currently it only serves as a credential fetching helper class, while it is still necessary to manually make app installation specific requests."
    },
    {
        "title": "GPG signatures for source validation",
        "body": "As we all know, today more than ever before, it is crucial to be able to trust our computing environments. One of the main difficulties that package maintainers of GNU/Linux distributions face, is the difficulty to verify the authenticity and the integrity of the source code. With GPG signatures it is possible for packagers to verify source code releases quickly and easily.  In order to securely package your software I am kindly requesting GPG signatures for the source tarballs. If you are not yet familiar with secure source code signing I recommend using [GPGit](https://github.com/NicoHood/gpgit) which automates the process of secure source code signing and also has a quick start guide on GPG for learning how to use it manually.  Thanks in advance."
    },
    {
        "title": "Delete/restore branch associated with a pull request",
        "body": "GitHub Pull Request page provides a [Delete Branch] that invokes ..../pull/:number/cleanup  Need equivalent Pull Request methods to remove and/or restore the branch associated with the pull request"
    },
    {
        "title": "ETag not supported to make conditional requests through API?",
        "body": "I notice that the GitHubObject has an `eTag` attribute, but I don't see the ability to pass this in to any of the different api calls.  Am I missing something or is this a missing feature?  I notice it's mentioned in the v2 API docs."
    },
    {
        "title": "Test recorder adds wrong string for token authorization",
        "body": "When recording a test and using a `GithubCredentials.py` like:  ``` login = \"meneal\" password = \"\" oauth_token = \"REDACTED\" ```  the test recorder places the string `token private_token_removed` in the recorded file.  When the test is run after the recording is made, the following stack trace is produced:  ``` Traceback (most recent call last):   File \"github/tests/OrganizationHasInMembers.py\", line 32, in setUp     self.user = self.g.get_user(\"meneal\")   File \"github/MainClass.py\", line 159, in get_user     \"/users/\" + login   File \"github/Requester.py\", line 172, in requestJsonAndCheck     return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))   File \"github/Requester.py\", line 213, in requestJson     return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)   File \"github/Requester.py\", line 252, in __requestEncode     status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)   File \"github/Requester.py\", line 277, in __requestRaw     requestHeaders   File \"github/tests/Framework.py\", line 151, in request     self.__testCase.assertEqual(headers, eval(readLine(self.__file))) AssertionError: {'Authorization': 'Basic login_and_password_removed', 'User-Agent': 'PyGithub/Py [truncated]... != {'Authorization': 'token private_token_removed', 'User-Agent': 'PyGithub/Python' [truncated]... - {'Authorization': 'Basic login_and_password_removed', + {'Authorization': 'token private_token_removed',    'User-Agent': 'PyGithub/Python'} ```  I manually changed the string in the recorded file to be `Basic login_and_password_removed` and the test passed with no error. I believe there are two options for this:  - Make the test in `Framework.py` in some way accept the `token_private_token_removed` - Change something(not sure what this is offhand) in the recorder to make it use `Basic login_and_password_removed` regardless of whether a token or basic login is used."
    },
    {
        "title": "Handling new milestone and label events",
        "body": "GitHub added some support to pick up some new Milestone and Label events. Would be great if these were supported/tested by PyGithub.  ref: https://developer.github.com/changes/2016-10-27-new-label-and-milestone-webhooks"
    }
]
